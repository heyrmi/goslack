// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const checkUserWorkspaceRole = `-- name: CheckUserWorkspaceRole :one
SELECT role FROM users
WHERE id = $1 AND workspace_id = $2
LIMIT 1
`

type CheckUserWorkspaceRoleParams struct {
	ID          int64         `json:"id"`
	WorkspaceID sql.NullInt64 `json:"workspace_id"`
}

func (q *Queries) CheckUserWorkspaceRole(ctx context.Context, arg CheckUserWorkspaceRoleParams) (string, error) {
	row := q.db.QueryRowContext(ctx, checkUserWorkspaceRole, arg.ID, arg.WorkspaceID)
	var role string
	err := row.Scan(&role)
	return role, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    organization_id,
    email,
    first_name,
    last_name,
    hashed_password
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role
`

type CreateUserParams struct {
	OrganizationID int64  `json:"organization_id"`
	Email          string `json:"email"`
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.OrganizationID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Role,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Role,
	)
	return i, err
}

const getUsersByWorkspace = `-- name: GetUsersByWorkspace :many
SELECT id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role FROM users
WHERE workspace_id = $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type GetUsersByWorkspaceParams struct {
	WorkspaceID sql.NullInt64 `json:"workspace_id"`
	Limit       int32         `json:"limit"`
	Offset      int32         `json:"offset"`
}

func (q *Queries) GetUsersByWorkspace(ctx context.Context, arg GetUsersByWorkspaceParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByWorkspace, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.WorkspaceID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role FROM users
WHERE organization_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUsersParams struct {
	OrganizationID int64 `json:"organization_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.WorkspaceID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET
    hashed_password = $2,
    password_changed_at = now()
WHERE id = $1
RETURNING id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role
`

type UpdateUserPasswordParams struct {
	ID             int64  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Role,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET
    first_name = $2,
    last_name = $3
WHERE id = $1
RETURNING id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role
`

type UpdateUserProfileParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile, arg.ID, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Role,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET role = $2
WHERE id = $1
RETURNING id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role
`

type UpdateUserRoleParams struct {
	ID   int64  `json:"id"`
	Role string `json:"role"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserRole, arg.ID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Role,
	)
	return i, err
}

const updateUserWorkspace = `-- name: UpdateUserWorkspace :one
UPDATE users
SET 
    workspace_id = $2,
    role = $3
WHERE id = $1
RETURNING id, organization_id, email, first_name, last_name, hashed_password, password_changed_at, created_at, workspace_id, role
`

type UpdateUserWorkspaceParams struct {
	ID          int64         `json:"id"`
	WorkspaceID sql.NullInt64 `json:"workspace_id"`
	Role        string        `json:"role"`
}

func (q *Queries) UpdateUserWorkspace(ctx context.Context, arg UpdateUserWorkspaceParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserWorkspace, arg.ID, arg.WorkspaceID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.WorkspaceID,
		&i.Role,
	)
	return i, err
}
