// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message_drafts.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const cleanupOldDrafts = `-- name: CleanupOldDrafts :exec
DELETE FROM message_drafts 
WHERE updated_at < $1
`

func (q *Queries) CleanupOldDrafts(ctx context.Context, updatedAt time.Time) error {
	_, err := q.db.ExecContext(ctx, cleanupOldDrafts, updatedAt)
	return err
}

const deleteMessageDraft = `-- name: DeleteMessageDraft :exec
DELETE FROM message_drafts
WHERE user_id = $1 
  AND (channel_id = $2 OR (channel_id IS NULL AND $2 IS NULL))
  AND (receiver_id = $3 OR (receiver_id IS NULL AND $3 IS NULL))
  AND (thread_id = $4 OR (thread_id IS NULL AND $4 IS NULL))
`

type DeleteMessageDraftParams struct {
	UserID     int64         `json:"user_id"`
	ChannelID  sql.NullInt64 `json:"channel_id"`
	ReceiverID sql.NullInt64 `json:"receiver_id"`
	ThreadID   sql.NullInt64 `json:"thread_id"`
}

func (q *Queries) DeleteMessageDraft(ctx context.Context, arg DeleteMessageDraftParams) error {
	_, err := q.db.ExecContext(ctx, deleteMessageDraft,
		arg.UserID,
		arg.ChannelID,
		arg.ReceiverID,
		arg.ThreadID,
	)
	return err
}

const getMessageDraft = `-- name: GetMessageDraft :one
SELECT id, user_id, workspace_id, channel_id, receiver_id, thread_id, content, created_at, updated_at FROM message_drafts
WHERE user_id = $1 
  AND (channel_id = $2 OR (channel_id IS NULL AND $2 IS NULL))
  AND (receiver_id = $3 OR (receiver_id IS NULL AND $3 IS NULL))
  AND (thread_id = $4 OR (thread_id IS NULL AND $4 IS NULL))
`

type GetMessageDraftParams struct {
	UserID     int64         `json:"user_id"`
	ChannelID  sql.NullInt64 `json:"channel_id"`
	ReceiverID sql.NullInt64 `json:"receiver_id"`
	ThreadID   sql.NullInt64 `json:"thread_id"`
}

func (q *Queries) GetMessageDraft(ctx context.Context, arg GetMessageDraftParams) (MessageDraft, error) {
	row := q.db.QueryRowContext(ctx, getMessageDraft,
		arg.UserID,
		arg.ChannelID,
		arg.ReceiverID,
		arg.ThreadID,
	)
	var i MessageDraft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.ReceiverID,
		&i.ThreadID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserDrafts = `-- name: GetUserDrafts :many
SELECT md.id, md.user_id, md.workspace_id, md.channel_id, md.receiver_id, md.thread_id, md.content, md.created_at, md.updated_at, c.name as channel_name, u.first_name, u.last_name
FROM message_drafts md
LEFT JOIN channels c ON md.channel_id = c.id
LEFT JOIN users u ON md.receiver_id = u.id
WHERE md.user_id = $1 AND md.workspace_id = $2
ORDER BY md.updated_at DESC
`

type GetUserDraftsParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

type GetUserDraftsRow struct {
	ID          int64          `json:"id"`
	UserID      int64          `json:"user_id"`
	WorkspaceID int64          `json:"workspace_id"`
	ChannelID   sql.NullInt64  `json:"channel_id"`
	ReceiverID  sql.NullInt64  `json:"receiver_id"`
	ThreadID    sql.NullInt64  `json:"thread_id"`
	Content     string         `json:"content"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	ChannelName sql.NullString `json:"channel_name"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
}

func (q *Queries) GetUserDrafts(ctx context.Context, arg GetUserDraftsParams) ([]GetUserDraftsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserDrafts, arg.UserID, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserDraftsRow{}
	for rows.Next() {
		var i GetUserDraftsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WorkspaceID,
			&i.ChannelID,
			&i.ReceiverID,
			&i.ThreadID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ChannelName,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMessageDraft = `-- name: SaveMessageDraft :one
INSERT INTO message_drafts (user_id, workspace_id, channel_id, receiver_id, thread_id, content, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, now())
ON CONFLICT (user_id, channel_id, receiver_id, thread_id)
DO UPDATE SET content = EXCLUDED.content, updated_at = now()
RETURNING id, user_id, workspace_id, channel_id, receiver_id, thread_id, content, created_at, updated_at
`

type SaveMessageDraftParams struct {
	UserID      int64         `json:"user_id"`
	WorkspaceID int64         `json:"workspace_id"`
	ChannelID   sql.NullInt64 `json:"channel_id"`
	ReceiverID  sql.NullInt64 `json:"receiver_id"`
	ThreadID    sql.NullInt64 `json:"thread_id"`
	Content     string        `json:"content"`
}

func (q *Queries) SaveMessageDraft(ctx context.Context, arg SaveMessageDraftParams) (MessageDraft, error) {
	row := q.db.QueryRowContext(ctx, saveMessageDraft,
		arg.UserID,
		arg.WorkspaceID,
		arg.ChannelID,
		arg.ReceiverID,
		arg.ThreadID,
		arg.Content,
	)
	var i MessageDraft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.ReceiverID,
		&i.ThreadID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
