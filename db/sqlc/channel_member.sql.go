// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channel_member.sql

package db

import (
	"context"
	"time"
)

const addChannelMember = `-- name: AddChannelMember :one
INSERT INTO channel_members (
    channel_id,
    user_id,
    added_by,
    role
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, channel_id, user_id, added_by, role, joined_at
`

type AddChannelMemberParams struct {
	ChannelID int64  `json:"channel_id"`
	UserID    int64  `json:"user_id"`
	AddedBy   int64  `json:"added_by"`
	Role      string `json:"role"`
}

func (q *Queries) AddChannelMember(ctx context.Context, arg AddChannelMemberParams) (ChannelMember, error) {
	row := q.db.QueryRowContext(ctx, addChannelMember,
		arg.ChannelID,
		arg.UserID,
		arg.AddedBy,
		arg.Role,
	)
	var i ChannelMember
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.UserID,
		&i.AddedBy,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const checkChannelMembership = `-- name: CheckChannelMembership :one
SELECT role FROM channel_members
WHERE channel_id = $1 AND user_id = $2
`

type CheckChannelMembershipParams struct {
	ChannelID int64 `json:"channel_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) CheckChannelMembership(ctx context.Context, arg CheckChannelMembershipParams) (string, error) {
	row := q.db.QueryRowContext(ctx, checkChannelMembership, arg.ChannelID, arg.UserID)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getChannelMembers = `-- name: GetChannelMembers :many
SELECT 
    cm.id, cm.channel_id, cm.user_id, cm.added_by, cm.role, cm.joined_at,
    u.first_name,
    u.last_name,
    u.email
FROM channel_members cm
JOIN users u ON cm.user_id = u.id
WHERE cm.channel_id = $1
ORDER BY cm.joined_at ASC
LIMIT $2
OFFSET $3
`

type GetChannelMembersParams struct {
	ChannelID int64 `json:"channel_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetChannelMembersRow struct {
	ID        int64     `json:"id"`
	ChannelID int64     `json:"channel_id"`
	UserID    int64     `json:"user_id"`
	AddedBy   int64     `json:"added_by"`
	Role      string    `json:"role"`
	JoinedAt  time.Time `json:"joined_at"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
}

func (q *Queries) GetChannelMembers(ctx context.Context, arg GetChannelMembersParams) ([]GetChannelMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getChannelMembers, arg.ChannelID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChannelMembersRow{}
	for rows.Next() {
		var i GetChannelMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.ChannelID,
			&i.UserID,
			&i.AddedBy,
			&i.Role,
			&i.JoinedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserChannels = `-- name: GetUserChannels :many
SELECT 
    c.id, c.workspace_id, c.name, c.is_private, c.created_by, c.created_at
FROM channels c
JOIN channel_members cm ON c.id = cm.channel_id
WHERE cm.user_id = $1 AND c.workspace_id = $2
ORDER BY c.created_at ASC
`

type GetUserChannelsParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

func (q *Queries) GetUserChannels(ctx context.Context, arg GetUserChannelsParams) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getUserChannels, arg.UserID, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Channel{}
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.IsPrivate,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isChannelMember = `-- name: IsChannelMember :one
SELECT EXISTS(
    SELECT 1 FROM channel_members
    WHERE channel_id = $1 AND user_id = $2
)
`

type IsChannelMemberParams struct {
	ChannelID int64 `json:"channel_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) IsChannelMember(ctx context.Context, arg IsChannelMemberParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isChannelMember, arg.ChannelID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeChannelMember = `-- name: RemoveChannelMember :exec
DELETE FROM channel_members
WHERE channel_id = $1 AND user_id = $2
`

type RemoveChannelMemberParams struct {
	ChannelID int64 `json:"channel_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) RemoveChannelMember(ctx context.Context, arg RemoveChannelMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeChannelMember, arg.ChannelID, arg.UserID)
	return err
}
