// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: unread_messages.sql

package db

import (
	"context"
	"database/sql"
)

const getChannelUnreadCount = `-- name: GetChannelUnreadCount :one
SELECT COALESCE(unread_count, 0) as unread_count
FROM unread_messages
WHERE user_id = $1 AND channel_id = $2
`

type GetChannelUnreadCountParams struct {
	UserID    int64         `json:"user_id"`
	ChannelID sql.NullInt64 `json:"channel_id"`
}

func (q *Queries) GetChannelUnreadCount(ctx context.Context, arg GetChannelUnreadCountParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getChannelUnreadCount, arg.UserID, arg.ChannelID)
	var unread_count int32
	err := row.Scan(&unread_count)
	return unread_count, err
}

const getDirectMessageUnreadCount = `-- name: GetDirectMessageUnreadCount :one
SELECT COALESCE(SUM(unread_count), 0) as total_unread
FROM unread_messages
WHERE user_id = $1 AND channel_id IS NULL
`

func (q *Queries) GetDirectMessageUnreadCount(ctx context.Context, userID int64) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getDirectMessageUnreadCount, userID)
	var total_unread interface{}
	err := row.Scan(&total_unread)
	return total_unread, err
}

const getUnreadMessages = `-- name: GetUnreadMessages :many
SELECT id, user_id, workspace_id, channel_id, last_read_message_id, unread_count, last_read_at, updated_at FROM unread_messages
WHERE user_id = $1 AND workspace_id = $2
ORDER BY updated_at DESC
`

type GetUnreadMessagesParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

func (q *Queries) GetUnreadMessages(ctx context.Context, arg GetUnreadMessagesParams) ([]UnreadMessage, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadMessages, arg.UserID, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UnreadMessage{}
	for rows.Next() {
		var i UnreadMessage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WorkspaceID,
			&i.ChannelID,
			&i.LastReadMessageID,
			&i.UnreadCount,
			&i.LastReadAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceUnreadCount = `-- name: GetWorkspaceUnreadCount :one
SELECT COALESCE(SUM(unread_count), 0) as total_unread
FROM unread_messages
WHERE user_id = $1 AND workspace_id = $2
`

type GetWorkspaceUnreadCountParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

func (q *Queries) GetWorkspaceUnreadCount(ctx context.Context, arg GetWorkspaceUnreadCountParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceUnreadCount, arg.UserID, arg.WorkspaceID)
	var total_unread interface{}
	err := row.Scan(&total_unread)
	return total_unread, err
}

const markChannelAsRead = `-- name: MarkChannelAsRead :exec
INSERT INTO unread_messages (user_id, workspace_id, channel_id, last_read_message_id, unread_count, last_read_at, updated_at)
VALUES ($1, $2, $3, $4, 0, now(), now())
ON CONFLICT (user_id, channel_id)
DO UPDATE SET 
    last_read_message_id = $4,
    unread_count = 0,
    last_read_at = now(),
    updated_at = now()
`

type MarkChannelAsReadParams struct {
	UserID            int64         `json:"user_id"`
	WorkspaceID       int64         `json:"workspace_id"`
	ChannelID         sql.NullInt64 `json:"channel_id"`
	LastReadMessageID sql.NullInt64 `json:"last_read_message_id"`
}

func (q *Queries) MarkChannelAsRead(ctx context.Context, arg MarkChannelAsReadParams) error {
	_, err := q.db.ExecContext(ctx, markChannelAsRead,
		arg.UserID,
		arg.WorkspaceID,
		arg.ChannelID,
		arg.LastReadMessageID,
	)
	return err
}

const markDirectMessagesAsRead = `-- name: MarkDirectMessagesAsRead :exec
INSERT INTO unread_messages (user_id, workspace_id, channel_id, last_read_message_id, unread_count, last_read_at, updated_at)
VALUES ($1, $2, NULL, $3, 0, now(), now())
ON CONFLICT (user_id, channel_id)
DO UPDATE SET 
    last_read_message_id = $3,
    unread_count = 0,
    last_read_at = now(),
    updated_at = now()
`

type MarkDirectMessagesAsReadParams struct {
	UserID            int64         `json:"user_id"`
	WorkspaceID       int64         `json:"workspace_id"`
	LastReadMessageID sql.NullInt64 `json:"last_read_message_id"`
}

func (q *Queries) MarkDirectMessagesAsRead(ctx context.Context, arg MarkDirectMessagesAsReadParams) error {
	_, err := q.db.ExecContext(ctx, markDirectMessagesAsRead, arg.UserID, arg.WorkspaceID, arg.LastReadMessageID)
	return err
}

const resetUnreadCount = `-- name: ResetUnreadCount :exec
UPDATE unread_messages 
SET unread_count = 0, last_read_at = now(), updated_at = now()
WHERE user_id = $1 AND channel_id = $2
`

type ResetUnreadCountParams struct {
	UserID    int64         `json:"user_id"`
	ChannelID sql.NullInt64 `json:"channel_id"`
}

func (q *Queries) ResetUnreadCount(ctx context.Context, arg ResetUnreadCountParams) error {
	_, err := q.db.ExecContext(ctx, resetUnreadCount, arg.UserID, arg.ChannelID)
	return err
}
