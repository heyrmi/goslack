// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_verification.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createEmailVerificationToken = `-- name: CreateEmailVerificationToken :one
INSERT INTO email_verification_tokens (
    user_id, token, email, token_type, expires_at, ip_address, user_agent
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, token, email, token_type, expires_at, used_at, created_at, ip_address, user_agent
`

type CreateEmailVerificationTokenParams struct {
	UserID    int64          `json:"user_id"`
	Token     string         `json:"token"`
	Email     string         `json:"email"`
	TokenType string         `json:"token_type"`
	ExpiresAt time.Time      `json:"expires_at"`
	IpAddress pqtype.Inet    `json:"ip_address"`
	UserAgent sql.NullString `json:"user_agent"`
}

func (q *Queries) CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, createEmailVerificationToken,
		arg.UserID,
		arg.Token,
		arg.Email,
		arg.TokenType,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Email,
		&i.TokenType,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO password_reset_tokens (
    user_id, token, expires_at, ip_address, user_agent
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, token, expires_at, used_at, created_at, ip_address, user_agent
`

type CreatePasswordResetTokenParams struct {
	UserID    int64          `json:"user_id"`
	Token     string         `json:"token"`
	ExpiresAt time.Time      `json:"expires_at"`
	IpAddress pqtype.Inet    `json:"ip_address"`
	UserAgent sql.NullString `json:"user_agent"`
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, createPasswordResetToken,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const deleteExpiredEmailVerificationTokens = `-- name: DeleteExpiredEmailVerificationTokens :exec
DELETE FROM email_verification_tokens 
WHERE expires_at < now() AND used_at IS NULL
`

func (q *Queries) DeleteExpiredEmailVerificationTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredEmailVerificationTokens)
	return err
}

const deleteExpiredPasswordResetTokens = `-- name: DeleteExpiredPasswordResetTokens :exec
DELETE FROM password_reset_tokens 
WHERE expires_at < now() AND used_at IS NULL
`

func (q *Queries) DeleteExpiredPasswordResetTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredPasswordResetTokens)
	return err
}

const deleteUserPasswordResetTokens = `-- name: DeleteUserPasswordResetTokens :exec
DELETE FROM password_reset_tokens 
WHERE user_id = $1 AND used_at IS NULL
`

func (q *Queries) DeleteUserPasswordResetTokens(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPasswordResetTokens, userID)
	return err
}

const getEmailVerificationToken = `-- name: GetEmailVerificationToken :one
SELECT id, user_id, token, email, token_type, expires_at, used_at, created_at, ip_address, user_agent FROM email_verification_tokens 
WHERE token = $1 AND used_at IS NULL AND expires_at > now()
`

func (q *Queries) GetEmailVerificationToken(ctx context.Context, token string) (EmailVerificationToken, error) {
	row := q.db.QueryRowContext(ctx, getEmailVerificationToken, token)
	var i EmailVerificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Email,
		&i.TokenType,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT id, user_id, token, expires_at, used_at, created_at, ip_address, user_agent FROM password_reset_tokens 
WHERE token = $1 AND used_at IS NULL AND expires_at > now()
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const getUserEmailVerificationTokens = `-- name: GetUserEmailVerificationTokens :many
SELECT id, user_id, token, email, token_type, expires_at, used_at, created_at, ip_address, user_agent FROM email_verification_tokens 
WHERE user_id = $1 AND token_type = $2 
ORDER BY created_at DESC
`

type GetUserEmailVerificationTokensParams struct {
	UserID    int64  `json:"user_id"`
	TokenType string `json:"token_type"`
}

func (q *Queries) GetUserEmailVerificationTokens(ctx context.Context, arg GetUserEmailVerificationTokensParams) ([]EmailVerificationToken, error) {
	rows, err := q.db.QueryContext(ctx, getUserEmailVerificationTokens, arg.UserID, arg.TokenType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmailVerificationToken{}
	for rows.Next() {
		var i EmailVerificationToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Email,
			&i.TokenType,
			&i.ExpiresAt,
			&i.UsedAt,
			&i.CreatedAt,
			&i.IpAddress,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const useEmailVerificationToken = `-- name: UseEmailVerificationToken :exec
UPDATE email_verification_tokens 
SET used_at = now() 
WHERE token = $1 AND used_at IS NULL
`

func (q *Queries) UseEmailVerificationToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, useEmailVerificationToken, token)
	return err
}

const usePasswordResetToken = `-- name: UsePasswordResetToken :exec
UPDATE password_reset_tokens 
SET used_at = now() 
WHERE token = $1 AND used_at IS NULL
`

func (q *Queries) UsePasswordResetToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, usePasswordResetToken, token)
	return err
}
