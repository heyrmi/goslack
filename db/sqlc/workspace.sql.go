// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspace.sql

package db

import (
	"context"
	"time"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces (
    organization_id,
    name
) VALUES (
    $1, $2
)
RETURNING id, organization_id, name, created_at
`

type CreateWorkspaceParams struct {
	OrganizationID int64  `json:"organization_id"`
	Name           string `json:"name"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, createWorkspace, arg.OrganizationID, arg.Name)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces
WHERE id = $1
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWorkspace, id)
	return err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT id, organization_id, name, created_at FROM workspaces
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorkspace(ctx context.Context, id int64) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspace, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, organization_id, name, created_at FROM workspaces
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorkspaceByID(ctx context.Context, id int64) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceByID, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkspaceWithUserCount = `-- name: GetWorkspaceWithUserCount :one
SELECT 
    w.id, w.organization_id, w.name, w.created_at,
    COUNT(u.id) as user_count
FROM workspaces w
LEFT JOIN users u ON w.id = u.workspace_id
WHERE w.id = $1
GROUP BY w.id, w.organization_id, w.name, w.created_at
LIMIT 1
`

type GetWorkspaceWithUserCountRow struct {
	ID             int64     `json:"id"`
	OrganizationID int64     `json:"organization_id"`
	Name           string    `json:"name"`
	CreatedAt      time.Time `json:"created_at"`
	UserCount      int64     `json:"user_count"`
}

func (q *Queries) GetWorkspaceWithUserCount(ctx context.Context, id int64) (GetWorkspaceWithUserCountRow, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceWithUserCount, id)
	var i GetWorkspaceWithUserCountRow
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.CreatedAt,
		&i.UserCount,
	)
	return i, err
}

const listWorkspacesByOrganization = `-- name: ListWorkspacesByOrganization :many
SELECT id, organization_id, name, created_at FROM workspaces
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListWorkspacesByOrganizationParams struct {
	OrganizationID int64 `json:"organization_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListWorkspacesByOrganization(ctx context.Context, arg ListWorkspacesByOrganizationParams) ([]Workspace, error) {
	rows, err := q.db.QueryContext(ctx, listWorkspacesByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workspace{}
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkspace = `-- name: UpdateWorkspace :one
UPDATE workspaces
SET name = $2
WHERE id = $1
RETURNING id, organization_id, name, created_at
`

type UpdateWorkspaceParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, updateWorkspace, arg.ID, arg.Name)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}
