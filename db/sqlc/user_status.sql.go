// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_status.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getOnlineUsersInWorkspace = `-- name: GetOnlineUsersInWorkspace :many
SELECT 
    us.user_id, us.workspace_id, us.status, us.custom_status, us.last_activity_at, us.last_seen_at, us.updated_at,
    u.first_name,
    u.last_name,
    u.email
FROM user_status us
JOIN users u ON us.user_id = u.id
WHERE us.workspace_id = $1 
    AND us.status IN ('online', 'away', 'busy')
ORDER BY us.updated_at DESC
`

type GetOnlineUsersInWorkspaceRow struct {
	UserID         int64          `json:"user_id"`
	WorkspaceID    int64          `json:"workspace_id"`
	Status         string         `json:"status"`
	CustomStatus   sql.NullString `json:"custom_status"`
	LastActivityAt time.Time      `json:"last_activity_at"`
	LastSeenAt     time.Time      `json:"last_seen_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	Email          string         `json:"email"`
}

func (q *Queries) GetOnlineUsersInWorkspace(ctx context.Context, workspaceID int64) ([]GetOnlineUsersInWorkspaceRow, error) {
	rows, err := q.db.QueryContext(ctx, getOnlineUsersInWorkspace, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOnlineUsersInWorkspaceRow{}
	for rows.Next() {
		var i GetOnlineUsersInWorkspaceRow
		if err := rows.Scan(
			&i.UserID,
			&i.WorkspaceID,
			&i.Status,
			&i.CustomStatus,
			&i.LastActivityAt,
			&i.LastSeenAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserStatus = `-- name: GetUserStatus :one
SELECT user_id, workspace_id, status, custom_status, last_activity_at, last_seen_at, updated_at FROM user_status
WHERE user_id = $1 AND workspace_id = $2
`

type GetUserStatusParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

func (q *Queries) GetUserStatus(ctx context.Context, arg GetUserStatusParams) (UserStatus, error) {
	row := q.db.QueryRowContext(ctx, getUserStatus, arg.UserID, arg.WorkspaceID)
	var i UserStatus
	err := row.Scan(
		&i.UserID,
		&i.WorkspaceID,
		&i.Status,
		&i.CustomStatus,
		&i.LastActivityAt,
		&i.LastSeenAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkspaceUserStatuses = `-- name: GetWorkspaceUserStatuses :many
SELECT 
    us.user_id, us.workspace_id, us.status, us.custom_status, us.last_activity_at, us.last_seen_at, us.updated_at,
    u.first_name,
    u.last_name,
    u.email
FROM user_status us
JOIN users u ON us.user_id = u.id
WHERE us.workspace_id = $1
ORDER BY us.updated_at DESC
LIMIT $2
OFFSET $3
`

type GetWorkspaceUserStatusesParams struct {
	WorkspaceID int64 `json:"workspace_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

type GetWorkspaceUserStatusesRow struct {
	UserID         int64          `json:"user_id"`
	WorkspaceID    int64          `json:"workspace_id"`
	Status         string         `json:"status"`
	CustomStatus   sql.NullString `json:"custom_status"`
	LastActivityAt time.Time      `json:"last_activity_at"`
	LastSeenAt     time.Time      `json:"last_seen_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	Email          string         `json:"email"`
}

func (q *Queries) GetWorkspaceUserStatuses(ctx context.Context, arg GetWorkspaceUserStatusesParams) ([]GetWorkspaceUserStatusesRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceUserStatuses, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWorkspaceUserStatusesRow{}
	for rows.Next() {
		var i GetWorkspaceUserStatusesRow
		if err := rows.Scan(
			&i.UserID,
			&i.WorkspaceID,
			&i.Status,
			&i.CustomStatus,
			&i.LastActivityAt,
			&i.LastSeenAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUsersOfflineAfterInactivity = `-- name: SetUsersOfflineAfterInactivity :exec
UPDATE user_status
SET 
    status = 'offline',
    updated_at = now()
WHERE last_activity_at < $1 AND status != 'offline'
`

func (q *Queries) SetUsersOfflineAfterInactivity(ctx context.Context, lastActivityAt time.Time) error {
	_, err := q.db.ExecContext(ctx, setUsersOfflineAfterInactivity, lastActivityAt)
	return err
}

const updateLastActivity = `-- name: UpdateLastActivity :exec
UPDATE user_status
SET 
    last_activity_at = now(),
    last_seen_at = now(),
    updated_at = now()
WHERE user_id = $1 AND workspace_id = $2
`

type UpdateLastActivityParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

func (q *Queries) UpdateLastActivity(ctx context.Context, arg UpdateLastActivityParams) error {
	_, err := q.db.ExecContext(ctx, updateLastActivity, arg.UserID, arg.WorkspaceID)
	return err
}

const upsertUserStatus = `-- name: UpsertUserStatus :one
INSERT INTO user_status (
    user_id,
    workspace_id,
    status,
    custom_status,
    updated_at
) VALUES (
    $1, $2, $3, $4, now()
)
ON CONFLICT (user_id) DO UPDATE SET
    status = EXCLUDED.status,
    custom_status = EXCLUDED.custom_status,
    updated_at = now()
RETURNING user_id, workspace_id, status, custom_status, last_activity_at, last_seen_at, updated_at
`

type UpsertUserStatusParams struct {
	UserID       int64          `json:"user_id"`
	WorkspaceID  int64          `json:"workspace_id"`
	Status       string         `json:"status"`
	CustomStatus sql.NullString `json:"custom_status"`
}

func (q *Queries) UpsertUserStatus(ctx context.Context, arg UpsertUserStatusParams) (UserStatus, error) {
	row := q.db.QueryRowContext(ctx, upsertUserStatus,
		arg.UserID,
		arg.WorkspaceID,
		arg.Status,
		arg.CustomStatus,
	)
	var i UserStatus
	err := row.Scan(
		&i.UserID,
		&i.WorkspaceID,
		&i.Status,
		&i.CustomStatus,
		&i.LastActivityAt,
		&i.LastSeenAt,
		&i.UpdatedAt,
	)
	return i, err
}
