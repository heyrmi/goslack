// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channel.sql

package db

import (
	"context"
	"time"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (
    workspace_id,
    name,
    is_private,
    created_by
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, workspace_id, name, is_private, created_by, created_at
`

type CreateChannelParams struct {
	WorkspaceID int64  `json:"workspace_id"`
	Name        string `json:"name"`
	IsPrivate   bool   `json:"is_private"`
	CreatedBy   int64  `json:"created_by"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel,
		arg.WorkspaceID,
		arg.Name,
		arg.IsPrivate,
		arg.CreatedBy,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.IsPrivate,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channels
WHERE id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChannel, id)
	return err
}

const getChannel = `-- name: GetChannel :one
SELECT id, workspace_id, name, is_private, created_by, created_at FROM channels
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChannel(ctx context.Context, id int64) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannel, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.IsPrivate,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getChannelByID = `-- name: GetChannelByID :one
SELECT id, workspace_id, name, is_private, created_by, created_at FROM channels
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChannelByID(ctx context.Context, id int64) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByID, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.IsPrivate,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getChannelWithCreator = `-- name: GetChannelWithCreator :one
SELECT 
    c.id, c.workspace_id, c.name, c.is_private, c.created_by, c.created_at,
    u.first_name as creator_first_name,
    u.last_name as creator_last_name,
    u.email as creator_email
FROM channels c
JOIN users u ON c.created_by = u.id
WHERE c.id = $1
LIMIT 1
`

type GetChannelWithCreatorRow struct {
	ID               int64     `json:"id"`
	WorkspaceID      int64     `json:"workspace_id"`
	Name             string    `json:"name"`
	IsPrivate        bool      `json:"is_private"`
	CreatedBy        int64     `json:"created_by"`
	CreatedAt        time.Time `json:"created_at"`
	CreatorFirstName string    `json:"creator_first_name"`
	CreatorLastName  string    `json:"creator_last_name"`
	CreatorEmail     string    `json:"creator_email"`
}

func (q *Queries) GetChannelWithCreator(ctx context.Context, id int64) (GetChannelWithCreatorRow, error) {
	row := q.db.QueryRowContext(ctx, getChannelWithCreator, id)
	var i GetChannelWithCreatorRow
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.IsPrivate,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.CreatorFirstName,
		&i.CreatorLastName,
		&i.CreatorEmail,
	)
	return i, err
}

const listChannelsByWorkspace = `-- name: ListChannelsByWorkspace :many
SELECT id, workspace_id, name, is_private, created_by, created_at FROM channels
WHERE workspace_id = $1
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type ListChannelsByWorkspaceParams struct {
	WorkspaceID int64 `json:"workspace_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListChannelsByWorkspace(ctx context.Context, arg ListChannelsByWorkspaceParams) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, listChannelsByWorkspace, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Channel{}
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.IsPrivate,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicChannelsByWorkspace = `-- name: ListPublicChannelsByWorkspace :many
SELECT id, workspace_id, name, is_private, created_by, created_at FROM channels
WHERE workspace_id = $1 AND is_private = false
ORDER BY created_at ASC
LIMIT $2
OFFSET $3
`

type ListPublicChannelsByWorkspaceParams struct {
	WorkspaceID int64 `json:"workspace_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListPublicChannelsByWorkspace(ctx context.Context, arg ListPublicChannelsByWorkspaceParams) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, listPublicChannelsByWorkspace, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Channel{}
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Name,
			&i.IsPrivate,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :one
UPDATE channels
SET 
    name = $2,
    is_private = $3
WHERE id = $1
RETURNING id, workspace_id, name, is_private, created_by, created_at
`

type UpdateChannelParams struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	IsPrivate bool   `json:"is_private"`
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, updateChannel, arg.ID, arg.Name, arg.IsPrivate)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Name,
		&i.IsPrivate,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
