// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workspace_invitation.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const acceptWorkspaceInvitation = `-- name: AcceptWorkspaceInvitation :one
UPDATE workspace_invitations
SET 
    status = 'accepted',
    accepted_at = NOW(),
    invitee_id = $2
WHERE invitation_code = $1 AND status = 'pending' AND expires_at > NOW()
RETURNING id, workspace_id, inviter_id, invitee_email, invitee_id, invitation_code, role, status, expires_at, accepted_at, created_at
`

type AcceptWorkspaceInvitationParams struct {
	InvitationCode string        `json:"invitation_code"`
	InviteeID      sql.NullInt64 `json:"invitee_id"`
}

func (q *Queries) AcceptWorkspaceInvitation(ctx context.Context, arg AcceptWorkspaceInvitationParams) (WorkspaceInvitation, error) {
	row := q.db.QueryRowContext(ctx, acceptWorkspaceInvitation, arg.InvitationCode, arg.InviteeID)
	var i WorkspaceInvitation
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.InviterID,
		&i.InviteeEmail,
		&i.InviteeID,
		&i.InvitationCode,
		&i.Role,
		&i.Status,
		&i.ExpiresAt,
		&i.AcceptedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createWorkspaceInvitation = `-- name: CreateWorkspaceInvitation :one
INSERT INTO workspace_invitations (
    workspace_id,
    inviter_id,
    invitee_email,
    invitee_id,
    invitation_code,
    role,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, workspace_id, inviter_id, invitee_email, invitee_id, invitation_code, role, status, expires_at, accepted_at, created_at
`

type CreateWorkspaceInvitationParams struct {
	WorkspaceID    int64         `json:"workspace_id"`
	InviterID      int64         `json:"inviter_id"`
	InviteeEmail   string        `json:"invitee_email"`
	InviteeID      sql.NullInt64 `json:"invitee_id"`
	InvitationCode string        `json:"invitation_code"`
	Role           string        `json:"role"`
	ExpiresAt      time.Time     `json:"expires_at"`
}

func (q *Queries) CreateWorkspaceInvitation(ctx context.Context, arg CreateWorkspaceInvitationParams) (WorkspaceInvitation, error) {
	row := q.db.QueryRowContext(ctx, createWorkspaceInvitation,
		arg.WorkspaceID,
		arg.InviterID,
		arg.InviteeEmail,
		arg.InviteeID,
		arg.InvitationCode,
		arg.Role,
		arg.ExpiresAt,
	)
	var i WorkspaceInvitation
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.InviterID,
		&i.InviteeEmail,
		&i.InviteeID,
		&i.InvitationCode,
		&i.Role,
		&i.Status,
		&i.ExpiresAt,
		&i.AcceptedAt,
		&i.CreatedAt,
	)
	return i, err
}

const declineWorkspaceInvitation = `-- name: DeclineWorkspaceInvitation :one
UPDATE workspace_invitations
SET status = 'declined'
WHERE invitation_code = $1 AND status = 'pending'
RETURNING id, workspace_id, inviter_id, invitee_email, invitee_id, invitation_code, role, status, expires_at, accepted_at, created_at
`

func (q *Queries) DeclineWorkspaceInvitation(ctx context.Context, invitationCode string) (WorkspaceInvitation, error) {
	row := q.db.QueryRowContext(ctx, declineWorkspaceInvitation, invitationCode)
	var i WorkspaceInvitation
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.InviterID,
		&i.InviteeEmail,
		&i.InviteeID,
		&i.InvitationCode,
		&i.Role,
		&i.Status,
		&i.ExpiresAt,
		&i.AcceptedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWorkspaceInvitation = `-- name: DeleteWorkspaceInvitation :exec
DELETE FROM workspace_invitations
WHERE id = $1
`

func (q *Queries) DeleteWorkspaceInvitation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWorkspaceInvitation, id)
	return err
}

const expireWorkspaceInvitation = `-- name: ExpireWorkspaceInvitation :exec
UPDATE workspace_invitations
SET status = 'expired'
WHERE id = $1
`

func (q *Queries) ExpireWorkspaceInvitation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, expireWorkspaceInvitation, id)
	return err
}

const getPendingInvitationsForUser = `-- name: GetPendingInvitationsForUser :many
SELECT wi.id, wi.workspace_id, wi.inviter_id, wi.invitee_email, wi.invitee_id, wi.invitation_code, wi.role, wi.status, wi.expires_at, wi.accepted_at, wi.created_at, w.name as workspace_name, u.first_name as inviter_first_name, u.last_name as inviter_last_name
FROM workspace_invitations wi
JOIN workspaces w ON wi.workspace_id = w.id
JOIN users u ON wi.inviter_id = u.id
WHERE wi.invitee_email = $1 AND wi.status = 'pending' AND wi.expires_at > NOW()
ORDER BY wi.created_at DESC
`

type GetPendingInvitationsForUserRow struct {
	ID               int64         `json:"id"`
	WorkspaceID      int64         `json:"workspace_id"`
	InviterID        int64         `json:"inviter_id"`
	InviteeEmail     string        `json:"invitee_email"`
	InviteeID        sql.NullInt64 `json:"invitee_id"`
	InvitationCode   string        `json:"invitation_code"`
	Role             string        `json:"role"`
	Status           string        `json:"status"`
	ExpiresAt        time.Time     `json:"expires_at"`
	AcceptedAt       sql.NullTime  `json:"accepted_at"`
	CreatedAt        time.Time     `json:"created_at"`
	WorkspaceName    string        `json:"workspace_name"`
	InviterFirstName string        `json:"inviter_first_name"`
	InviterLastName  string        `json:"inviter_last_name"`
}

func (q *Queries) GetPendingInvitationsForUser(ctx context.Context, inviteeEmail string) ([]GetPendingInvitationsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPendingInvitationsForUser, inviteeEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPendingInvitationsForUserRow{}
	for rows.Next() {
		var i GetPendingInvitationsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.InviterID,
			&i.InviteeEmail,
			&i.InviteeID,
			&i.InvitationCode,
			&i.Role,
			&i.Status,
			&i.ExpiresAt,
			&i.AcceptedAt,
			&i.CreatedAt,
			&i.WorkspaceName,
			&i.InviterFirstName,
			&i.InviterLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceInvitation = `-- name: GetWorkspaceInvitation :one
SELECT id, workspace_id, inviter_id, invitee_email, invitee_id, invitation_code, role, status, expires_at, accepted_at, created_at FROM workspace_invitations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorkspaceInvitation(ctx context.Context, id int64) (WorkspaceInvitation, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceInvitation, id)
	var i WorkspaceInvitation
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.InviterID,
		&i.InviteeEmail,
		&i.InviteeID,
		&i.InvitationCode,
		&i.Role,
		&i.Status,
		&i.ExpiresAt,
		&i.AcceptedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkspaceInvitationByCode = `-- name: GetWorkspaceInvitationByCode :one
SELECT id, workspace_id, inviter_id, invitee_email, invitee_id, invitation_code, role, status, expires_at, accepted_at, created_at FROM workspace_invitations
WHERE invitation_code = $1 AND status = 'pending' AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetWorkspaceInvitationByCode(ctx context.Context, invitationCode string) (WorkspaceInvitation, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceInvitationByCode, invitationCode)
	var i WorkspaceInvitation
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.InviterID,
		&i.InviteeEmail,
		&i.InviteeID,
		&i.InvitationCode,
		&i.Role,
		&i.Status,
		&i.ExpiresAt,
		&i.AcceptedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listWorkspaceInvitations = `-- name: ListWorkspaceInvitations :many
SELECT id, workspace_id, inviter_id, invitee_email, invitee_id, invitation_code, role, status, expires_at, accepted_at, created_at FROM workspace_invitations
WHERE workspace_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListWorkspaceInvitationsParams struct {
	WorkspaceID int64 `json:"workspace_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListWorkspaceInvitations(ctx context.Context, arg ListWorkspaceInvitationsParams) ([]WorkspaceInvitation, error) {
	rows, err := q.db.QueryContext(ctx, listWorkspaceInvitations, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkspaceInvitation{}
	for rows.Next() {
		var i WorkspaceInvitation
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.InviterID,
			&i.InviteeEmail,
			&i.InviteeID,
			&i.InvitationCode,
			&i.Role,
			&i.Status,
			&i.ExpiresAt,
			&i.AcceptedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
