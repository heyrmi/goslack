// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_sessions.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const cleanupOldSessions = `-- name: CleanupOldSessions :exec
DELETE FROM user_sessions 
WHERE is_active = false AND last_used_at < $1
`

func (q *Queries) CleanupOldSessions(ctx context.Context, lastUsedAt time.Time) error {
	_, err := q.db.ExecContext(ctx, cleanupOldSessions, lastUsedAt)
	return err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (
    user_id, session_token, refresh_token, expires_at, 
    ip_address, user_agent, device_info
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, session_token, refresh_token, expires_at, is_active, ip_address, user_agent, device_info, created_at, last_used_at
`

type CreateUserSessionParams struct {
	UserID       int64                 `json:"user_id"`
	SessionToken string                `json:"session_token"`
	RefreshToken string                `json:"refresh_token"`
	ExpiresAt    time.Time             `json:"expires_at"`
	IpAddress    pqtype.Inet           `json:"ip_address"`
	UserAgent    sql.NullString        `json:"user_agent"`
	DeviceInfo   pqtype.NullRawMessage `json:"device_info"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createUserSession,
		arg.UserID,
		arg.SessionToken,
		arg.RefreshToken,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
		arg.DeviceInfo,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsActive,
		&i.IpAddress,
		&i.UserAgent,
		&i.DeviceInfo,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deactivateExpiredSessions = `-- name: DeactivateExpiredSessions :exec
UPDATE user_sessions 
SET is_active = false 
WHERE expires_at < now() AND is_active = true
`

func (q *Queries) DeactivateExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deactivateExpiredSessions)
	return err
}

const deactivateSession = `-- name: DeactivateSession :exec
UPDATE user_sessions 
SET is_active = false 
WHERE session_token = $1
`

func (q *Queries) DeactivateSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.ExecContext(ctx, deactivateSession, sessionToken)
	return err
}

const deactivateUserSessions = `-- name: DeactivateUserSessions :exec
UPDATE user_sessions 
SET is_active = false 
WHERE user_id = $1 AND is_active = true
`

func (q *Queries) DeactivateUserSessions(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deactivateUserSessions, userID)
	return err
}

const getUserActiveSessions = `-- name: GetUserActiveSessions :many
SELECT id, user_id, session_token, refresh_token, expires_at, is_active, ip_address, user_agent, device_info, created_at, last_used_at FROM user_sessions 
WHERE user_id = $1 AND is_active = true 
ORDER BY last_used_at DESC
`

func (q *Queries) GetUserActiveSessions(ctx context.Context, userID int64) ([]UserSession, error) {
	rows, err := q.db.QueryContext(ctx, getUserActiveSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSession{}
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionToken,
			&i.RefreshToken,
			&i.ExpiresAt,
			&i.IsActive,
			&i.IpAddress,
			&i.UserAgent,
			&i.DeviceInfo,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSession = `-- name: GetUserSession :one
SELECT id, user_id, session_token, refresh_token, expires_at, is_active, ip_address, user_agent, device_info, created_at, last_used_at FROM user_sessions 
WHERE session_token = $1 AND is_active = true AND expires_at > now()
`

func (q *Queries) GetUserSession(ctx context.Context, sessionToken string) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, getUserSession, sessionToken)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsActive,
		&i.IpAddress,
		&i.UserAgent,
		&i.DeviceInfo,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getUserSessionByRefreshToken = `-- name: GetUserSessionByRefreshToken :one
SELECT id, user_id, session_token, refresh_token, expires_at, is_active, ip_address, user_agent, device_info, created_at, last_used_at FROM user_sessions 
WHERE refresh_token = $1 AND is_active = true AND expires_at > now()
`

func (q *Queries) GetUserSessionByRefreshToken(ctx context.Context, refreshToken string) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, getUserSessionByRefreshToken, refreshToken)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsActive,
		&i.IpAddress,
		&i.UserAgent,
		&i.DeviceInfo,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const updateSessionLastUsed = `-- name: UpdateSessionLastUsed :exec
UPDATE user_sessions 
SET last_used_at = now() 
WHERE session_token = $1
`

func (q *Queries) UpdateSessionLastUsed(ctx context.Context, sessionToken string) error {
	_, err := q.db.ExecContext(ctx, updateSessionLastUsed, sessionToken)
	return err
}
