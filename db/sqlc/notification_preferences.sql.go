// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notification_preferences.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createNotificationPreference = `-- name: CreateNotificationPreference :one
INSERT INTO notification_preferences (
    user_id, workspace_id, channel_id, notification_type,
    email_notifications, push_notifications, desktop_notifications,
    keywords, do_not_disturb_start, do_not_disturb_end, timezone
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, user_id, workspace_id, channel_id, notification_type, email_notifications, push_notifications, desktop_notifications, keywords, do_not_disturb_start, do_not_disturb_end, timezone, created_at, updated_at
`

type CreateNotificationPreferenceParams struct {
	UserID               int64          `json:"user_id"`
	WorkspaceID          int64          `json:"workspace_id"`
	ChannelID            sql.NullInt64  `json:"channel_id"`
	NotificationType     string         `json:"notification_type"`
	EmailNotifications   bool           `json:"email_notifications"`
	PushNotifications    bool           `json:"push_notifications"`
	DesktopNotifications bool           `json:"desktop_notifications"`
	Keywords             []string       `json:"keywords"`
	DoNotDisturbStart    sql.NullTime   `json:"do_not_disturb_start"`
	DoNotDisturbEnd      sql.NullTime   `json:"do_not_disturb_end"`
	Timezone             sql.NullString `json:"timezone"`
}

func (q *Queries) CreateNotificationPreference(ctx context.Context, arg CreateNotificationPreferenceParams) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, createNotificationPreference,
		arg.UserID,
		arg.WorkspaceID,
		arg.ChannelID,
		arg.NotificationType,
		arg.EmailNotifications,
		arg.PushNotifications,
		arg.DesktopNotifications,
		pq.Array(arg.Keywords),
		arg.DoNotDisturbStart,
		arg.DoNotDisturbEnd,
		arg.Timezone,
	)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.NotificationType,
		&i.EmailNotifications,
		&i.PushNotifications,
		&i.DesktopNotifications,
		pq.Array(&i.Keywords),
		&i.DoNotDisturbStart,
		&i.DoNotDisturbEnd,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNotificationPreference = `-- name: DeleteNotificationPreference :exec
DELETE FROM notification_preferences
WHERE user_id = $1 AND workspace_id = $2 AND channel_id = $3
`

type DeleteNotificationPreferenceParams struct {
	UserID      int64         `json:"user_id"`
	WorkspaceID int64         `json:"workspace_id"`
	ChannelID   sql.NullInt64 `json:"channel_id"`
}

func (q *Queries) DeleteNotificationPreference(ctx context.Context, arg DeleteNotificationPreferenceParams) error {
	_, err := q.db.ExecContext(ctx, deleteNotificationPreference, arg.UserID, arg.WorkspaceID, arg.ChannelID)
	return err
}

const deleteUserNotificationPreferences = `-- name: DeleteUserNotificationPreferences :exec
DELETE FROM notification_preferences
WHERE user_id = $1
`

func (q *Queries) DeleteUserNotificationPreferences(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserNotificationPreferences, userID)
	return err
}

const getGlobalNotificationPreference = `-- name: GetGlobalNotificationPreference :one
SELECT id, user_id, workspace_id, channel_id, notification_type, email_notifications, push_notifications, desktop_notifications, keywords, do_not_disturb_start, do_not_disturb_end, timezone, created_at, updated_at FROM notification_preferences
WHERE user_id = $1 AND workspace_id = $2 AND channel_id IS NULL
`

type GetGlobalNotificationPreferenceParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

func (q *Queries) GetGlobalNotificationPreference(ctx context.Context, arg GetGlobalNotificationPreferenceParams) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, getGlobalNotificationPreference, arg.UserID, arg.WorkspaceID)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.NotificationType,
		&i.EmailNotifications,
		&i.PushNotifications,
		&i.DesktopNotifications,
		pq.Array(&i.Keywords),
		&i.DoNotDisturbStart,
		&i.DoNotDisturbEnd,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotificationPreference = `-- name: GetNotificationPreference :one
SELECT id, user_id, workspace_id, channel_id, notification_type, email_notifications, push_notifications, desktop_notifications, keywords, do_not_disturb_start, do_not_disturb_end, timezone, created_at, updated_at FROM notification_preferences
WHERE user_id = $1 AND workspace_id = $2 AND channel_id = $3
`

type GetNotificationPreferenceParams struct {
	UserID      int64         `json:"user_id"`
	WorkspaceID int64         `json:"workspace_id"`
	ChannelID   sql.NullInt64 `json:"channel_id"`
}

func (q *Queries) GetNotificationPreference(ctx context.Context, arg GetNotificationPreferenceParams) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, getNotificationPreference, arg.UserID, arg.WorkspaceID, arg.ChannelID)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.NotificationType,
		&i.EmailNotifications,
		&i.PushNotifications,
		&i.DesktopNotifications,
		pq.Array(&i.Keywords),
		&i.DoNotDisturbStart,
		&i.DoNotDisturbEnd,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserNotificationPreferences = `-- name: GetUserNotificationPreferences :many
SELECT id, user_id, workspace_id, channel_id, notification_type, email_notifications, push_notifications, desktop_notifications, keywords, do_not_disturb_start, do_not_disturb_end, timezone, created_at, updated_at FROM notification_preferences
WHERE user_id = $1 AND workspace_id = $2
ORDER BY channel_id NULLS FIRST
`

type GetUserNotificationPreferencesParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

func (q *Queries) GetUserNotificationPreferences(ctx context.Context, arg GetUserNotificationPreferencesParams) ([]NotificationPreference, error) {
	rows, err := q.db.QueryContext(ctx, getUserNotificationPreferences, arg.UserID, arg.WorkspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NotificationPreference{}
	for rows.Next() {
		var i NotificationPreference
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WorkspaceID,
			&i.ChannelID,
			&i.NotificationType,
			&i.EmailNotifications,
			&i.PushNotifications,
			&i.DesktopNotifications,
			pq.Array(&i.Keywords),
			&i.DoNotDisturbStart,
			&i.DoNotDisturbEnd,
			&i.Timezone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isInDoNotDisturbMode = `-- name: IsInDoNotDisturbMode :one
SELECT CASE 
    WHEN do_not_disturb_start IS NULL OR do_not_disturb_end IS NULL THEN false
    WHEN do_not_disturb_start <= do_not_disturb_end THEN
        CURRENT_TIME BETWEEN do_not_disturb_start AND do_not_disturb_end
    ELSE
        CURRENT_TIME >= do_not_disturb_start OR CURRENT_TIME <= do_not_disturb_end
END as is_in_dnd_mode
FROM notification_preferences
WHERE user_id = $1 AND workspace_id = $2 AND channel_id IS NULL
`

type IsInDoNotDisturbModeParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

func (q *Queries) IsInDoNotDisturbMode(ctx context.Context, arg IsInDoNotDisturbModeParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, isInDoNotDisturbMode, arg.UserID, arg.WorkspaceID)
	var is_in_dnd_mode interface{}
	err := row.Scan(&is_in_dnd_mode)
	return is_in_dnd_mode, err
}

const updateNotificationPreference = `-- name: UpdateNotificationPreference :one
UPDATE notification_preferences
SET 
    notification_type = $4,
    email_notifications = $5,
    push_notifications = $6,
    desktop_notifications = $7,
    keywords = $8,
    do_not_disturb_start = $9,
    do_not_disturb_end = $10,
    timezone = $11,
    updated_at = now()
WHERE user_id = $1 AND workspace_id = $2 AND channel_id = $3
RETURNING id, user_id, workspace_id, channel_id, notification_type, email_notifications, push_notifications, desktop_notifications, keywords, do_not_disturb_start, do_not_disturb_end, timezone, created_at, updated_at
`

type UpdateNotificationPreferenceParams struct {
	UserID               int64          `json:"user_id"`
	WorkspaceID          int64          `json:"workspace_id"`
	ChannelID            sql.NullInt64  `json:"channel_id"`
	NotificationType     string         `json:"notification_type"`
	EmailNotifications   bool           `json:"email_notifications"`
	PushNotifications    bool           `json:"push_notifications"`
	DesktopNotifications bool           `json:"desktop_notifications"`
	Keywords             []string       `json:"keywords"`
	DoNotDisturbStart    sql.NullTime   `json:"do_not_disturb_start"`
	DoNotDisturbEnd      sql.NullTime   `json:"do_not_disturb_end"`
	Timezone             sql.NullString `json:"timezone"`
}

func (q *Queries) UpdateNotificationPreference(ctx context.Context, arg UpdateNotificationPreferenceParams) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, updateNotificationPreference,
		arg.UserID,
		arg.WorkspaceID,
		arg.ChannelID,
		arg.NotificationType,
		arg.EmailNotifications,
		arg.PushNotifications,
		arg.DesktopNotifications,
		pq.Array(arg.Keywords),
		arg.DoNotDisturbStart,
		arg.DoNotDisturbEnd,
		arg.Timezone,
	)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.NotificationType,
		&i.EmailNotifications,
		&i.PushNotifications,
		&i.DesktopNotifications,
		pq.Array(&i.Keywords),
		&i.DoNotDisturbStart,
		&i.DoNotDisturbEnd,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertNotificationPreference = `-- name: UpsertNotificationPreference :one
INSERT INTO notification_preferences (
    user_id, workspace_id, channel_id, notification_type,
    email_notifications, push_notifications, desktop_notifications,
    keywords, do_not_disturb_start, do_not_disturb_end, timezone
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
ON CONFLICT (user_id, workspace_id, channel_id)
DO UPDATE SET
    notification_type = EXCLUDED.notification_type,
    email_notifications = EXCLUDED.email_notifications,
    push_notifications = EXCLUDED.push_notifications,
    desktop_notifications = EXCLUDED.desktop_notifications,
    keywords = EXCLUDED.keywords,
    do_not_disturb_start = EXCLUDED.do_not_disturb_start,
    do_not_disturb_end = EXCLUDED.do_not_disturb_end,
    timezone = EXCLUDED.timezone,
    updated_at = now()
RETURNING id, user_id, workspace_id, channel_id, notification_type, email_notifications, push_notifications, desktop_notifications, keywords, do_not_disturb_start, do_not_disturb_end, timezone, created_at, updated_at
`

type UpsertNotificationPreferenceParams struct {
	UserID               int64          `json:"user_id"`
	WorkspaceID          int64          `json:"workspace_id"`
	ChannelID            sql.NullInt64  `json:"channel_id"`
	NotificationType     string         `json:"notification_type"`
	EmailNotifications   bool           `json:"email_notifications"`
	PushNotifications    bool           `json:"push_notifications"`
	DesktopNotifications bool           `json:"desktop_notifications"`
	Keywords             []string       `json:"keywords"`
	DoNotDisturbStart    sql.NullTime   `json:"do_not_disturb_start"`
	DoNotDisturbEnd      sql.NullTime   `json:"do_not_disturb_end"`
	Timezone             sql.NullString `json:"timezone"`
}

func (q *Queries) UpsertNotificationPreference(ctx context.Context, arg UpsertNotificationPreferenceParams) (NotificationPreference, error) {
	row := q.db.QueryRowContext(ctx, upsertNotificationPreference,
		arg.UserID,
		arg.WorkspaceID,
		arg.ChannelID,
		arg.NotificationType,
		arg.EmailNotifications,
		arg.PushNotifications,
		arg.DesktopNotifications,
		pq.Array(arg.Keywords),
		arg.DoNotDisturbStart,
		arg.DoNotDisturbEnd,
		arg.Timezone,
	)
	var i NotificationPreference
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.NotificationType,
		&i.EmailNotifications,
		&i.PushNotifications,
		&i.DesktopNotifications,
		pq.Array(&i.Keywords),
		&i.DoNotDisturbStart,
		&i.DoNotDisturbEnd,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
