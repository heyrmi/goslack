// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: message_reactions.sql

package db

import (
	"context"
	"time"
)

const addMessageReaction = `-- name: AddMessageReaction :one
INSERT INTO message_reactions (message_id, user_id, emoji)
VALUES ($1, $2, $3)
ON CONFLICT (message_id, user_id, emoji) DO NOTHING
RETURNING id, message_id, user_id, emoji, created_at
`

type AddMessageReactionParams struct {
	MessageID int64  `json:"message_id"`
	UserID    int64  `json:"user_id"`
	Emoji     string `json:"emoji"`
}

func (q *Queries) AddMessageReaction(ctx context.Context, arg AddMessageReactionParams) (MessageReaction, error) {
	row := q.db.QueryRowContext(ctx, addMessageReaction, arg.MessageID, arg.UserID, arg.Emoji)
	var i MessageReaction
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.UserID,
		&i.Emoji,
		&i.CreatedAt,
	)
	return i, err
}

const getMessageReactionCounts = `-- name: GetMessageReactionCounts :many
SELECT emoji, COUNT(*) as count
FROM message_reactions
WHERE message_id = $1
GROUP BY emoji
ORDER BY count DESC, emoji ASC
`

type GetMessageReactionCountsRow struct {
	Emoji string `json:"emoji"`
	Count int64  `json:"count"`
}

func (q *Queries) GetMessageReactionCounts(ctx context.Context, messageID int64) ([]GetMessageReactionCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessageReactionCounts, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessageReactionCountsRow{}
	for rows.Next() {
		var i GetMessageReactionCountsRow
		if err := rows.Scan(&i.Emoji, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageReactions = `-- name: GetMessageReactions :many
SELECT mr.id, mr.message_id, mr.user_id, mr.emoji, mr.created_at, u.first_name, u.last_name 
FROM message_reactions mr
JOIN users u ON mr.user_id = u.id
WHERE mr.message_id = $1
ORDER BY mr.created_at ASC
`

type GetMessageReactionsRow struct {
	ID        int64     `json:"id"`
	MessageID int64     `json:"message_id"`
	UserID    int64     `json:"user_id"`
	Emoji     string    `json:"emoji"`
	CreatedAt time.Time `json:"created_at"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
}

func (q *Queries) GetMessageReactions(ctx context.Context, messageID int64) ([]GetMessageReactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessageReactions, messageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessageReactionsRow{}
	for rows.Next() {
		var i GetMessageReactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.UserID,
			&i.Emoji,
			&i.CreatedAt,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserReactionsForMessage = `-- name: GetUserReactionsForMessage :many
SELECT emoji FROM message_reactions
WHERE message_id = $1 AND user_id = $2
ORDER BY created_at ASC
`

type GetUserReactionsForMessageParams struct {
	MessageID int64 `json:"message_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) GetUserReactionsForMessage(ctx context.Context, arg GetUserReactionsForMessageParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserReactionsForMessage, arg.MessageID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var emoji string
		if err := rows.Scan(&emoji); err != nil {
			return nil, err
		}
		items = append(items, emoji)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasUserReacted = `-- name: HasUserReacted :one
SELECT EXISTS(
    SELECT 1 FROM message_reactions 
    WHERE message_id = $1 AND user_id = $2 AND emoji = $3
) as has_reacted
`

type HasUserReactedParams struct {
	MessageID int64  `json:"message_id"`
	UserID    int64  `json:"user_id"`
	Emoji     string `json:"emoji"`
}

func (q *Queries) HasUserReacted(ctx context.Context, arg HasUserReactedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasUserReacted, arg.MessageID, arg.UserID, arg.Emoji)
	var has_reacted bool
	err := row.Scan(&has_reacted)
	return has_reacted, err
}

const removeMessageReaction = `-- name: RemoveMessageReaction :exec
DELETE FROM message_reactions 
WHERE message_id = $1 AND user_id = $2 AND emoji = $3
`

type RemoveMessageReactionParams struct {
	MessageID int64  `json:"message_id"`
	UserID    int64  `json:"user_id"`
	Emoji     string `json:"emoji"`
}

func (q *Queries) RemoveMessageReaction(ctx context.Context, arg RemoveMessageReactionParams) error {
	_, err := q.db.ExecContext(ctx, removeMessageReaction, arg.MessageID, arg.UserID, arg.Emoji)
	return err
}
