// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_2fa.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createUser2FA = `-- name: CreateUser2FA :one
INSERT INTO user_2fa (user_id, secret, backup_codes)
VALUES ($1, $2, $3)
RETURNING id, user_id, secret, backup_codes, enabled, verified_at, created_at, updated_at
`

type CreateUser2FAParams struct {
	UserID      int64    `json:"user_id"`
	Secret      string   `json:"secret"`
	BackupCodes []string `json:"backup_codes"`
}

func (q *Queries) CreateUser2FA(ctx context.Context, arg CreateUser2FAParams) (User2fa, error) {
	row := q.db.QueryRowContext(ctx, createUser2FA, arg.UserID, arg.Secret, pq.Array(arg.BackupCodes))
	var i User2fa
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Secret,
		pq.Array(&i.BackupCodes),
		&i.Enabled,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser2FA = `-- name: DeleteUser2FA :exec
DELETE FROM user_2fa WHERE user_id = $1
`

func (q *Queries) DeleteUser2FA(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser2FA, userID)
	return err
}

const disableUser2FA = `-- name: DisableUser2FA :exec
UPDATE user_2fa 
SET enabled = false, updated_at = now()
WHERE user_id = $1
`

func (q *Queries) DisableUser2FA(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, disableUser2FA, userID)
	return err
}

const enableUser2FA = `-- name: EnableUser2FA :exec
UPDATE user_2fa 
SET enabled = true, verified_at = now(), updated_at = now()
WHERE user_id = $1
`

func (q *Queries) EnableUser2FA(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, enableUser2FA, userID)
	return err
}

const getUser2FA = `-- name: GetUser2FA :one
SELECT id, user_id, secret, backup_codes, enabled, verified_at, created_at, updated_at FROM user_2fa WHERE user_id = $1
`

func (q *Queries) GetUser2FA(ctx context.Context, userID int64) (User2fa, error) {
	row := q.db.QueryRowContext(ctx, getUser2FA, userID)
	var i User2fa
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Secret,
		pq.Array(&i.BackupCodes),
		&i.Enabled,
		&i.VerifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser2FABackupCodes = `-- name: UpdateUser2FABackupCodes :exec
UPDATE user_2fa 
SET backup_codes = $2, updated_at = now()
WHERE user_id = $1
`

type UpdateUser2FABackupCodesParams struct {
	UserID      int64    `json:"user_id"`
	BackupCodes []string `json:"backup_codes"`
}

func (q *Queries) UpdateUser2FABackupCodes(ctx context.Context, arg UpdateUser2FABackupCodesParams) error {
	_, err := q.db.ExecContext(ctx, updateUser2FABackupCodes, arg.UserID, pq.Array(arg.BackupCodes))
	return err
}
