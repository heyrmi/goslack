// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scheduled_messages.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const cancelScheduledMessage = `-- name: CancelScheduledMessage :exec
UPDATE scheduled_messages
SET cancelled_at = now()
WHERE id = $1 AND user_id = $2 AND sent_at IS NULL
`

type CancelScheduledMessageParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) CancelScheduledMessage(ctx context.Context, arg CancelScheduledMessageParams) error {
	_, err := q.db.ExecContext(ctx, cancelScheduledMessage, arg.ID, arg.UserID)
	return err
}

const cleanupOldScheduledMessages = `-- name: CleanupOldScheduledMessages :exec
DELETE FROM scheduled_messages
WHERE (sent_at IS NOT NULL OR cancelled_at IS NOT NULL)
  AND created_at < $1
`

func (q *Queries) CleanupOldScheduledMessages(ctx context.Context, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, cleanupOldScheduledMessages, createdAt)
	return err
}

const createScheduledMessage = `-- name: CreateScheduledMessage :one
INSERT INTO scheduled_messages (
    user_id, workspace_id, channel_id, receiver_id, thread_id,
    content, content_type, scheduled_for
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, user_id, workspace_id, channel_id, receiver_id, thread_id, content, content_type, scheduled_for, sent_at, cancelled_at, created_at
`

type CreateScheduledMessageParams struct {
	UserID       int64         `json:"user_id"`
	WorkspaceID  int64         `json:"workspace_id"`
	ChannelID    sql.NullInt64 `json:"channel_id"`
	ReceiverID   sql.NullInt64 `json:"receiver_id"`
	ThreadID     sql.NullInt64 `json:"thread_id"`
	Content      string        `json:"content"`
	ContentType  string        `json:"content_type"`
	ScheduledFor time.Time     `json:"scheduled_for"`
}

func (q *Queries) CreateScheduledMessage(ctx context.Context, arg CreateScheduledMessageParams) (ScheduledMessage, error) {
	row := q.db.QueryRowContext(ctx, createScheduledMessage,
		arg.UserID,
		arg.WorkspaceID,
		arg.ChannelID,
		arg.ReceiverID,
		arg.ThreadID,
		arg.Content,
		arg.ContentType,
		arg.ScheduledFor,
	)
	var i ScheduledMessage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.ReceiverID,
		&i.ThreadID,
		&i.Content,
		&i.ContentType,
		&i.ScheduledFor,
		&i.SentAt,
		&i.CancelledAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteScheduledMessage = `-- name: DeleteScheduledMessage :exec
DELETE FROM scheduled_messages
WHERE id = $1 AND user_id = $2 AND sent_at IS NULL
`

type DeleteScheduledMessageParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteScheduledMessage(ctx context.Context, arg DeleteScheduledMessageParams) error {
	_, err := q.db.ExecContext(ctx, deleteScheduledMessage, arg.ID, arg.UserID)
	return err
}

const getPendingScheduledMessages = `-- name: GetPendingScheduledMessages :many
SELECT id, user_id, workspace_id, channel_id, receiver_id, thread_id, content, content_type, scheduled_for, sent_at, cancelled_at, created_at FROM scheduled_messages
WHERE scheduled_for <= now()
  AND sent_at IS NULL 
  AND cancelled_at IS NULL
ORDER BY scheduled_for ASC
LIMIT $1
`

func (q *Queries) GetPendingScheduledMessages(ctx context.Context, limit int32) ([]ScheduledMessage, error) {
	rows, err := q.db.QueryContext(ctx, getPendingScheduledMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScheduledMessage{}
	for rows.Next() {
		var i ScheduledMessage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WorkspaceID,
			&i.ChannelID,
			&i.ReceiverID,
			&i.ThreadID,
			&i.Content,
			&i.ContentType,
			&i.ScheduledFor,
			&i.SentAt,
			&i.CancelledAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScheduledMessage = `-- name: GetScheduledMessage :one
SELECT id, user_id, workspace_id, channel_id, receiver_id, thread_id, content, content_type, scheduled_for, sent_at, cancelled_at, created_at FROM scheduled_messages
WHERE id = $1 AND user_id = $2
`

type GetScheduledMessageParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetScheduledMessage(ctx context.Context, arg GetScheduledMessageParams) (ScheduledMessage, error) {
	row := q.db.QueryRowContext(ctx, getScheduledMessage, arg.ID, arg.UserID)
	var i ScheduledMessage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.ReceiverID,
		&i.ThreadID,
		&i.Content,
		&i.ContentType,
		&i.ScheduledFor,
		&i.SentAt,
		&i.CancelledAt,
		&i.CreatedAt,
	)
	return i, err
}

const getScheduledMessagesStats = `-- name: GetScheduledMessagesStats :one
SELECT 
    COUNT(*) FILTER (WHERE sent_at IS NULL AND cancelled_at IS NULL) as pending_count,
    COUNT(*) FILTER (WHERE sent_at IS NOT NULL) as sent_count,
    COUNT(*) FILTER (WHERE cancelled_at IS NOT NULL) as cancelled_count
FROM scheduled_messages
WHERE user_id = $1 AND workspace_id = $2
`

type GetScheduledMessagesStatsParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
}

type GetScheduledMessagesStatsRow struct {
	PendingCount   int64 `json:"pending_count"`
	SentCount      int64 `json:"sent_count"`
	CancelledCount int64 `json:"cancelled_count"`
}

func (q *Queries) GetScheduledMessagesStats(ctx context.Context, arg GetScheduledMessagesStatsParams) (GetScheduledMessagesStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getScheduledMessagesStats, arg.UserID, arg.WorkspaceID)
	var i GetScheduledMessagesStatsRow
	err := row.Scan(&i.PendingCount, &i.SentCount, &i.CancelledCount)
	return i, err
}

const getUserScheduledMessages = `-- name: GetUserScheduledMessages :many
SELECT sm.id, sm.user_id, sm.workspace_id, sm.channel_id, sm.receiver_id, sm.thread_id, sm.content, sm.content_type, sm.scheduled_for, sm.sent_at, sm.cancelled_at, sm.created_at, c.name as channel_name, u.first_name, u.last_name
FROM scheduled_messages sm
LEFT JOIN channels c ON sm.channel_id = c.id
LEFT JOIN users u ON sm.receiver_id = u.id
WHERE sm.user_id = $1 AND sm.workspace_id = $2
  AND sm.sent_at IS NULL AND sm.cancelled_at IS NULL
ORDER BY sm.scheduled_for ASC
LIMIT $3 OFFSET $4
`

type GetUserScheduledMessagesParams struct {
	UserID      int64 `json:"user_id"`
	WorkspaceID int64 `json:"workspace_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

type GetUserScheduledMessagesRow struct {
	ID           int64          `json:"id"`
	UserID       int64          `json:"user_id"`
	WorkspaceID  int64          `json:"workspace_id"`
	ChannelID    sql.NullInt64  `json:"channel_id"`
	ReceiverID   sql.NullInt64  `json:"receiver_id"`
	ThreadID     sql.NullInt64  `json:"thread_id"`
	Content      string         `json:"content"`
	ContentType  string         `json:"content_type"`
	ScheduledFor time.Time      `json:"scheduled_for"`
	SentAt       sql.NullTime   `json:"sent_at"`
	CancelledAt  sql.NullTime   `json:"cancelled_at"`
	CreatedAt    time.Time      `json:"created_at"`
	ChannelName  sql.NullString `json:"channel_name"`
	FirstName    sql.NullString `json:"first_name"`
	LastName     sql.NullString `json:"last_name"`
}

func (q *Queries) GetUserScheduledMessages(ctx context.Context, arg GetUserScheduledMessagesParams) ([]GetUserScheduledMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserScheduledMessages,
		arg.UserID,
		arg.WorkspaceID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserScheduledMessagesRow{}
	for rows.Next() {
		var i GetUserScheduledMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WorkspaceID,
			&i.ChannelID,
			&i.ReceiverID,
			&i.ThreadID,
			&i.Content,
			&i.ContentType,
			&i.ScheduledFor,
			&i.SentAt,
			&i.CancelledAt,
			&i.CreatedAt,
			&i.ChannelName,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markScheduledMessageAsSent = `-- name: MarkScheduledMessageAsSent :exec
UPDATE scheduled_messages
SET sent_at = now()
WHERE id = $1
`

func (q *Queries) MarkScheduledMessageAsSent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markScheduledMessageAsSent, id)
	return err
}

const updateScheduledMessage = `-- name: UpdateScheduledMessage :one
UPDATE scheduled_messages
SET 
    content = $3,
    content_type = $4,
    scheduled_for = $5
WHERE id = $1 AND user_id = $2 AND sent_at IS NULL AND cancelled_at IS NULL
RETURNING id, user_id, workspace_id, channel_id, receiver_id, thread_id, content, content_type, scheduled_for, sent_at, cancelled_at, created_at
`

type UpdateScheduledMessageParams struct {
	ID           int64     `json:"id"`
	UserID       int64     `json:"user_id"`
	Content      string    `json:"content"`
	ContentType  string    `json:"content_type"`
	ScheduledFor time.Time `json:"scheduled_for"`
}

func (q *Queries) UpdateScheduledMessage(ctx context.Context, arg UpdateScheduledMessageParams) (ScheduledMessage, error) {
	row := q.db.QueryRowContext(ctx, updateScheduledMessage,
		arg.ID,
		arg.UserID,
		arg.Content,
		arg.ContentType,
		arg.ScheduledFor,
	)
	var i ScheduledMessage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkspaceID,
		&i.ChannelID,
		&i.ReceiverID,
		&i.ThreadID,
		&i.Content,
		&i.ContentType,
		&i.ScheduledFor,
		&i.SentAt,
		&i.CancelledAt,
		&i.CreatedAt,
	)
	return i, err
}
