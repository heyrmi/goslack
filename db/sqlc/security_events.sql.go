// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: security_events.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const cleanupOldSecurityEvents = `-- name: CleanupOldSecurityEvents :exec
DELETE FROM security_events 
WHERE created_at < $1
`

func (q *Queries) CleanupOldSecurityEvents(ctx context.Context, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, cleanupOldSecurityEvents, createdAt)
	return err
}

const createSecurityEvent = `-- name: CreateSecurityEvent :one
INSERT INTO security_events (
    user_id, event_type, description, ip_address, user_agent, metadata
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, event_type, description, ip_address, user_agent, metadata, created_at
`

type CreateSecurityEventParams struct {
	UserID      sql.NullInt64         `json:"user_id"`
	EventType   string                `json:"event_type"`
	Description sql.NullString        `json:"description"`
	IpAddress   pqtype.Inet           `json:"ip_address"`
	UserAgent   sql.NullString        `json:"user_agent"`
	Metadata    pqtype.NullRawMessage `json:"metadata"`
}

func (q *Queries) CreateSecurityEvent(ctx context.Context, arg CreateSecurityEventParams) (SecurityEvent, error) {
	row := q.db.QueryRowContext(ctx, createSecurityEvent,
		arg.UserID,
		arg.EventType,
		arg.Description,
		arg.IpAddress,
		arg.UserAgent,
		arg.Metadata,
	)
	var i SecurityEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventType,
		&i.Description,
		&i.IpAddress,
		&i.UserAgent,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const getRecentSecurityEvents = `-- name: GetRecentSecurityEvents :many
SELECT id, user_id, event_type, description, ip_address, user_agent, metadata, created_at FROM security_events 
WHERE created_at >= $1 
ORDER BY created_at DESC 
LIMIT $2
`

type GetRecentSecurityEventsParams struct {
	CreatedAt time.Time `json:"created_at"`
	Limit     int32     `json:"limit"`
}

func (q *Queries) GetRecentSecurityEvents(ctx context.Context, arg GetRecentSecurityEventsParams) ([]SecurityEvent, error) {
	rows, err := q.db.QueryContext(ctx, getRecentSecurityEvents, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SecurityEvent{}
	for rows.Next() {
		var i SecurityEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.Description,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecurityEventsByType = `-- name: GetSecurityEventsByType :many
SELECT id, user_id, event_type, description, ip_address, user_agent, metadata, created_at FROM security_events 
WHERE event_type = $1 
ORDER BY created_at DESC 
LIMIT $2 OFFSET $3
`

type GetSecurityEventsByTypeParams struct {
	EventType string `json:"event_type"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) GetSecurityEventsByType(ctx context.Context, arg GetSecurityEventsByTypeParams) ([]SecurityEvent, error) {
	rows, err := q.db.QueryContext(ctx, getSecurityEventsByType, arg.EventType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SecurityEvent{}
	for rows.Next() {
		var i SecurityEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.Description,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSecurityEvents = `-- name: GetUserSecurityEvents :many
SELECT id, user_id, event_type, description, ip_address, user_agent, metadata, created_at FROM security_events 
WHERE user_id = $1 
ORDER BY created_at DESC 
LIMIT $2 OFFSET $3
`

type GetUserSecurityEventsParams struct {
	UserID sql.NullInt64 `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) GetUserSecurityEvents(ctx context.Context, arg GetUserSecurityEventsParams) ([]SecurityEvent, error) {
	rows, err := q.db.QueryContext(ctx, getUserSecurityEvents, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SecurityEvent{}
	for rows.Next() {
		var i SecurityEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventType,
			&i.Description,
			&i.IpAddress,
			&i.UserAgent,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
