// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/heyrmi/goslack/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	db "github.com/heyrmi/goslack/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AcceptWorkspaceInvitation mocks base method.
func (m *MockStore) AcceptWorkspaceInvitation(arg0 context.Context, arg1 db.AcceptWorkspaceInvitationParams) (db.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptWorkspaceInvitation", arg0, arg1)
	ret0, _ := ret[0].(db.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptWorkspaceInvitation indicates an expected call of AcceptWorkspaceInvitation.
func (mr *MockStoreMockRecorder) AcceptWorkspaceInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptWorkspaceInvitation", reflect.TypeOf((*MockStore)(nil).AcceptWorkspaceInvitation), arg0, arg1)
}

// AddChannelMember mocks base method.
func (m *MockStore) AddChannelMember(arg0 context.Context, arg1 db.AddChannelMemberParams) (db.ChannelMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChannelMember", arg0, arg1)
	ret0, _ := ret[0].(db.ChannelMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChannelMember indicates an expected call of AddChannelMember.
func (mr *MockStoreMockRecorder) AddChannelMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChannelMember", reflect.TypeOf((*MockStore)(nil).AddChannelMember), arg0, arg1)
}

// AddMessageReaction mocks base method.
func (m *MockStore) AddMessageReaction(arg0 context.Context, arg1 db.AddMessageReactionParams) (db.MessageReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageReaction", arg0, arg1)
	ret0, _ := ret[0].(db.MessageReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessageReaction indicates an expected call of AddMessageReaction.
func (mr *MockStoreMockRecorder) AddMessageReaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageReaction", reflect.TypeOf((*MockStore)(nil).AddMessageReaction), arg0, arg1)
}

// AddUserToWorkspace mocks base method.
func (m *MockStore) AddUserToWorkspace(arg0 context.Context, arg1 db.AddUserToWorkspaceParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToWorkspace", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToWorkspace indicates an expected call of AddUserToWorkspace.
func (mr *MockStoreMockRecorder) AddUserToWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToWorkspace", reflect.TypeOf((*MockStore)(nil).AddUserToWorkspace), arg0, arg1)
}

// CancelScheduledMessage mocks base method.
func (m *MockStore) CancelScheduledMessage(arg0 context.Context, arg1 db.CancelScheduledMessageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelScheduledMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelScheduledMessage indicates an expected call of CancelScheduledMessage.
func (mr *MockStoreMockRecorder) CancelScheduledMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelScheduledMessage", reflect.TypeOf((*MockStore)(nil).CancelScheduledMessage), arg0, arg1)
}

// CheckChannelMembership mocks base method.
func (m *MockStore) CheckChannelMembership(arg0 context.Context, arg1 db.CheckChannelMembershipParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChannelMembership", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckChannelMembership indicates an expected call of CheckChannelMembership.
func (mr *MockStoreMockRecorder) CheckChannelMembership(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChannelMembership", reflect.TypeOf((*MockStore)(nil).CheckChannelMembership), arg0, arg1)
}

// CheckFileAccess mocks base method.
func (m *MockStore) CheckFileAccess(arg0 context.Context, arg1 db.CheckFileAccessParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFileAccess", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFileAccess indicates an expected call of CheckFileAccess.
func (mr *MockStoreMockRecorder) CheckFileAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFileAccess", reflect.TypeOf((*MockStore)(nil).CheckFileAccess), arg0, arg1)
}

// CheckMessageAuthor mocks base method.
func (m *MockStore) CheckMessageAuthor(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMessageAuthor", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMessageAuthor indicates an expected call of CheckMessageAuthor.
func (mr *MockStoreMockRecorder) CheckMessageAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMessageAuthor", reflect.TypeOf((*MockStore)(nil).CheckMessageAuthor), arg0, arg1)
}

// CheckUserInWorkspace mocks base method.
func (m *MockStore) CheckUserInWorkspace(arg0 context.Context, arg1 db.CheckUserInWorkspaceParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserInWorkspace", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserInWorkspace indicates an expected call of CheckUserInWorkspace.
func (mr *MockStoreMockRecorder) CheckUserInWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserInWorkspace", reflect.TypeOf((*MockStore)(nil).CheckUserInWorkspace), arg0, arg1)
}

// CheckUserWorkspaceRole mocks base method.
func (m *MockStore) CheckUserWorkspaceRole(arg0 context.Context, arg1 db.CheckUserWorkspaceRoleParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserWorkspaceRole", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserWorkspaceRole indicates an expected call of CheckUserWorkspaceRole.
func (mr *MockStoreMockRecorder) CheckUserWorkspaceRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserWorkspaceRole", reflect.TypeOf((*MockStore)(nil).CheckUserWorkspaceRole), arg0, arg1)
}

// CleanupIncompleteUploads mocks base method.
func (m *MockStore) CleanupIncompleteUploads(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupIncompleteUploads", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupIncompleteUploads indicates an expected call of CleanupIncompleteUploads.
func (mr *MockStoreMockRecorder) CleanupIncompleteUploads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupIncompleteUploads", reflect.TypeOf((*MockStore)(nil).CleanupIncompleteUploads), arg0)
}

// CleanupOldDrafts mocks base method.
func (m *MockStore) CleanupOldDrafts(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldDrafts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldDrafts indicates an expected call of CleanupOldDrafts.
func (mr *MockStoreMockRecorder) CleanupOldDrafts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldDrafts", reflect.TypeOf((*MockStore)(nil).CleanupOldDrafts), arg0, arg1)
}

// CleanupOldScheduledMessages mocks base method.
func (m *MockStore) CleanupOldScheduledMessages(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldScheduledMessages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldScheduledMessages indicates an expected call of CleanupOldScheduledMessages.
func (mr *MockStoreMockRecorder) CleanupOldScheduledMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldScheduledMessages", reflect.TypeOf((*MockStore)(nil).CleanupOldScheduledMessages), arg0, arg1)
}

// CleanupOldSecurityEvents mocks base method.
func (m *MockStore) CleanupOldSecurityEvents(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldSecurityEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldSecurityEvents indicates an expected call of CleanupOldSecurityEvents.
func (mr *MockStoreMockRecorder) CleanupOldSecurityEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldSecurityEvents", reflect.TypeOf((*MockStore)(nil).CleanupOldSecurityEvents), arg0, arg1)
}

// CleanupOldSessions mocks base method.
func (m *MockStore) CleanupOldSessions(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldSessions indicates an expected call of CleanupOldSessions.
func (mr *MockStoreMockRecorder) CleanupOldSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldSessions", reflect.TypeOf((*MockStore)(nil).CleanupOldSessions), arg0, arg1)
}

// CreateAccountLockout mocks base method.
func (m *MockStore) CreateAccountLockout(arg0 context.Context, arg1 int64) (db.AccountLockout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountLockout", arg0, arg1)
	ret0, _ := ret[0].(db.AccountLockout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountLockout indicates an expected call of CreateAccountLockout.
func (mr *MockStoreMockRecorder) CreateAccountLockout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountLockout", reflect.TypeOf((*MockStore)(nil).CreateAccountLockout), arg0, arg1)
}

// CreateChannel mocks base method.
func (m *MockStore) CreateChannel(arg0 context.Context, arg1 db.CreateChannelParams) (db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0, arg1)
	ret0, _ := ret[0].(db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockStoreMockRecorder) CreateChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockStore)(nil).CreateChannel), arg0, arg1)
}

// CreateChannelMessage mocks base method.
func (m *MockStore) CreateChannelMessage(arg0 context.Context, arg1 db.CreateChannelMessageParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannelMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannelMessage indicates an expected call of CreateChannelMessage.
func (mr *MockStoreMockRecorder) CreateChannelMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannelMessage", reflect.TypeOf((*MockStore)(nil).CreateChannelMessage), arg0, arg1)
}

// CreateDirectMessage mocks base method.
func (m *MockStore) CreateDirectMessage(arg0 context.Context, arg1 db.CreateDirectMessageParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectMessage indicates an expected call of CreateDirectMessage.
func (mr *MockStoreMockRecorder) CreateDirectMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectMessage", reflect.TypeOf((*MockStore)(nil).CreateDirectMessage), arg0, arg1)
}

// CreateEmailVerificationToken mocks base method.
func (m *MockStore) CreateEmailVerificationToken(arg0 context.Context, arg1 db.CreateEmailVerificationTokenParams) (db.EmailVerificationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailVerificationToken", arg0, arg1)
	ret0, _ := ret[0].(db.EmailVerificationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmailVerificationToken indicates an expected call of CreateEmailVerificationToken.
func (mr *MockStoreMockRecorder) CreateEmailVerificationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailVerificationToken", reflect.TypeOf((*MockStore)(nil).CreateEmailVerificationToken), arg0, arg1)
}

// CreateFile mocks base method.
func (m *MockStore) CreateFile(arg0 context.Context, arg1 db.CreateFileParams) (db.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1)
	ret0, _ := ret[0].(db.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockStoreMockRecorder) CreateFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockStore)(nil).CreateFile), arg0, arg1)
}

// CreateFileShare mocks base method.
func (m *MockStore) CreateFileShare(arg0 context.Context, arg1 db.CreateFileShareParams) (db.FileShare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileShare", arg0, arg1)
	ret0, _ := ret[0].(db.FileShare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileShare indicates an expected call of CreateFileShare.
func (mr *MockStoreMockRecorder) CreateFileShare(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileShare", reflect.TypeOf((*MockStore)(nil).CreateFileShare), arg0, arg1)
}

// CreateMessageFile mocks base method.
func (m *MockStore) CreateMessageFile(arg0 context.Context, arg1 db.CreateMessageFileParams) (db.MessageFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageFile", arg0, arg1)
	ret0, _ := ret[0].(db.MessageFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessageFile indicates an expected call of CreateMessageFile.
func (mr *MockStoreMockRecorder) CreateMessageFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageFile", reflect.TypeOf((*MockStore)(nil).CreateMessageFile), arg0, arg1)
}

// CreateMessageMention mocks base method.
func (m *MockStore) CreateMessageMention(arg0 context.Context, arg1 db.CreateMessageMentionParams) (db.MessageMention, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageMention", arg0, arg1)
	ret0, _ := ret[0].(db.MessageMention)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessageMention indicates an expected call of CreateMessageMention.
func (mr *MockStoreMockRecorder) CreateMessageMention(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageMention", reflect.TypeOf((*MockStore)(nil).CreateMessageMention), arg0, arg1)
}

// CreateNotificationPreference mocks base method.
func (m *MockStore) CreateNotificationPreference(arg0 context.Context, arg1 db.CreateNotificationPreferenceParams) (db.NotificationPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotificationPreference", arg0, arg1)
	ret0, _ := ret[0].(db.NotificationPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotificationPreference indicates an expected call of CreateNotificationPreference.
func (mr *MockStoreMockRecorder) CreateNotificationPreference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotificationPreference", reflect.TypeOf((*MockStore)(nil).CreateNotificationPreference), arg0, arg1)
}

// CreateOrganization mocks base method.
func (m *MockStore) CreateOrganization(arg0 context.Context, arg1 string) (db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockStoreMockRecorder) CreateOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockStore)(nil).CreateOrganization), arg0, arg1)
}

// CreatePasswordResetToken mocks base method.
func (m *MockStore) CreatePasswordResetToken(arg0 context.Context, arg1 db.CreatePasswordResetTokenParams) (db.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePasswordResetToken", arg0, arg1)
	ret0, _ := ret[0].(db.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePasswordResetToken indicates an expected call of CreatePasswordResetToken.
func (mr *MockStoreMockRecorder) CreatePasswordResetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePasswordResetToken", reflect.TypeOf((*MockStore)(nil).CreatePasswordResetToken), arg0, arg1)
}

// CreateScheduledMessage mocks base method.
func (m *MockStore) CreateScheduledMessage(arg0 context.Context, arg1 db.CreateScheduledMessageParams) (db.ScheduledMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduledMessage", arg0, arg1)
	ret0, _ := ret[0].(db.ScheduledMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduledMessage indicates an expected call of CreateScheduledMessage.
func (mr *MockStoreMockRecorder) CreateScheduledMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledMessage", reflect.TypeOf((*MockStore)(nil).CreateScheduledMessage), arg0, arg1)
}

// CreateSecurityEvent mocks base method.
func (m *MockStore) CreateSecurityEvent(arg0 context.Context, arg1 db.CreateSecurityEventParams) (db.SecurityEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityEvent", arg0, arg1)
	ret0, _ := ret[0].(db.SecurityEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityEvent indicates an expected call of CreateSecurityEvent.
func (mr *MockStoreMockRecorder) CreateSecurityEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityEvent", reflect.TypeOf((*MockStore)(nil).CreateSecurityEvent), arg0, arg1)
}

// CreateThreadReply mocks base method.
func (m *MockStore) CreateThreadReply(arg0 context.Context, arg1 db.CreateThreadReplyParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThreadReply", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThreadReply indicates an expected call of CreateThreadReply.
func (mr *MockStoreMockRecorder) CreateThreadReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThreadReply", reflect.TypeOf((*MockStore)(nil).CreateThreadReply), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUser2FA mocks base method.
func (m *MockStore) CreateUser2FA(arg0 context.Context, arg1 db.CreateUser2FAParams) (db.User2fa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser2FA", arg0, arg1)
	ret0, _ := ret[0].(db.User2fa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser2FA indicates an expected call of CreateUser2FA.
func (mr *MockStoreMockRecorder) CreateUser2FA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser2FA", reflect.TypeOf((*MockStore)(nil).CreateUser2FA), arg0, arg1)
}

// CreateUserSession mocks base method.
func (m *MockStore) CreateUserSession(arg0 context.Context, arg1 db.CreateUserSessionParams) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSession", arg0, arg1)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession.
func (mr *MockStoreMockRecorder) CreateUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockStore)(nil).CreateUserSession), arg0, arg1)
}

// CreateWorkspace mocks base method.
func (m *MockStore) CreateWorkspace(arg0 context.Context, arg1 db.CreateWorkspaceParams) (db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspace", arg0, arg1)
	ret0, _ := ret[0].(db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspace indicates an expected call of CreateWorkspace.
func (mr *MockStoreMockRecorder) CreateWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspace", reflect.TypeOf((*MockStore)(nil).CreateWorkspace), arg0, arg1)
}

// CreateWorkspaceInvitation mocks base method.
func (m *MockStore) CreateWorkspaceInvitation(arg0 context.Context, arg1 db.CreateWorkspaceInvitationParams) (db.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkspaceInvitation", arg0, arg1)
	ret0, _ := ret[0].(db.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkspaceInvitation indicates an expected call of CreateWorkspaceInvitation.
func (mr *MockStoreMockRecorder) CreateWorkspaceInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkspaceInvitation", reflect.TypeOf((*MockStore)(nil).CreateWorkspaceInvitation), arg0, arg1)
}

// DeactivateExpiredSessions mocks base method.
func (m *MockStore) DeactivateExpiredSessions(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateExpiredSessions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateExpiredSessions indicates an expected call of DeactivateExpiredSessions.
func (mr *MockStoreMockRecorder) DeactivateExpiredSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateExpiredSessions", reflect.TypeOf((*MockStore)(nil).DeactivateExpiredSessions), arg0)
}

// DeactivateSession mocks base method.
func (m *MockStore) DeactivateSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateSession indicates an expected call of DeactivateSession.
func (mr *MockStoreMockRecorder) DeactivateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateSession", reflect.TypeOf((*MockStore)(nil).DeactivateSession), arg0, arg1)
}

// DeactivateUserSessions mocks base method.
func (m *MockStore) DeactivateUserSessions(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateUserSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateUserSessions indicates an expected call of DeactivateUserSessions.
func (mr *MockStoreMockRecorder) DeactivateUserSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUserSessions", reflect.TypeOf((*MockStore)(nil).DeactivateUserSessions), arg0, arg1)
}

// DeclineWorkspaceInvitation mocks base method.
func (m *MockStore) DeclineWorkspaceInvitation(arg0 context.Context, arg1 string) (db.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineWorkspaceInvitation", arg0, arg1)
	ret0, _ := ret[0].(db.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeclineWorkspaceInvitation indicates an expected call of DeclineWorkspaceInvitation.
func (mr *MockStoreMockRecorder) DeclineWorkspaceInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineWorkspaceInvitation", reflect.TypeOf((*MockStore)(nil).DeclineWorkspaceInvitation), arg0, arg1)
}

// DeleteChannel mocks base method.
func (m *MockStore) DeleteChannel(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockStoreMockRecorder) DeleteChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockStore)(nil).DeleteChannel), arg0, arg1)
}

// DeleteExpiredEmailVerificationTokens mocks base method.
func (m *MockStore) DeleteExpiredEmailVerificationTokens(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredEmailVerificationTokens", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredEmailVerificationTokens indicates an expected call of DeleteExpiredEmailVerificationTokens.
func (mr *MockStoreMockRecorder) DeleteExpiredEmailVerificationTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredEmailVerificationTokens", reflect.TypeOf((*MockStore)(nil).DeleteExpiredEmailVerificationTokens), arg0)
}

// DeleteExpiredPasswordResetTokens mocks base method.
func (m *MockStore) DeleteExpiredPasswordResetTokens(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredPasswordResetTokens", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredPasswordResetTokens indicates an expected call of DeleteExpiredPasswordResetTokens.
func (mr *MockStoreMockRecorder) DeleteExpiredPasswordResetTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredPasswordResetTokens", reflect.TypeOf((*MockStore)(nil).DeleteExpiredPasswordResetTokens), arg0)
}

// DeleteFile mocks base method.
func (m *MockStore) DeleteFile(arg0 context.Context, arg1 db.DeleteFileParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockStoreMockRecorder) DeleteFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockStore)(nil).DeleteFile), arg0, arg1)
}

// DeleteMessageDraft mocks base method.
func (m *MockStore) DeleteMessageDraft(arg0 context.Context, arg1 db.DeleteMessageDraftParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessageDraft", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessageDraft indicates an expected call of DeleteMessageDraft.
func (mr *MockStoreMockRecorder) DeleteMessageDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageDraft", reflect.TypeOf((*MockStore)(nil).DeleteMessageDraft), arg0, arg1)
}

// DeleteMessageFile mocks base method.
func (m *MockStore) DeleteMessageFile(arg0 context.Context, arg1 db.DeleteMessageFileParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessageFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessageFile indicates an expected call of DeleteMessageFile.
func (mr *MockStoreMockRecorder) DeleteMessageFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessageFile", reflect.TypeOf((*MockStore)(nil).DeleteMessageFile), arg0, arg1)
}

// DeleteNotificationPreference mocks base method.
func (m *MockStore) DeleteNotificationPreference(arg0 context.Context, arg1 db.DeleteNotificationPreferenceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotificationPreference", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotificationPreference indicates an expected call of DeleteNotificationPreference.
func (mr *MockStoreMockRecorder) DeleteNotificationPreference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotificationPreference", reflect.TypeOf((*MockStore)(nil).DeleteNotificationPreference), arg0, arg1)
}

// DeleteOrganization mocks base method.
func (m *MockStore) DeleteOrganization(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockStoreMockRecorder) DeleteOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockStore)(nil).DeleteOrganization), arg0, arg1)
}

// DeleteScheduledMessage mocks base method.
func (m *MockStore) DeleteScheduledMessage(arg0 context.Context, arg1 db.DeleteScheduledMessageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScheduledMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScheduledMessage indicates an expected call of DeleteScheduledMessage.
func (mr *MockStoreMockRecorder) DeleteScheduledMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScheduledMessage", reflect.TypeOf((*MockStore)(nil).DeleteScheduledMessage), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUser2FA mocks base method.
func (m *MockStore) DeleteUser2FA(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser2FA", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser2FA indicates an expected call of DeleteUser2FA.
func (mr *MockStoreMockRecorder) DeleteUser2FA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser2FA", reflect.TypeOf((*MockStore)(nil).DeleteUser2FA), arg0, arg1)
}

// DeleteUserNotificationPreferences mocks base method.
func (m *MockStore) DeleteUserNotificationPreferences(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserNotificationPreferences", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserNotificationPreferences indicates an expected call of DeleteUserNotificationPreferences.
func (mr *MockStoreMockRecorder) DeleteUserNotificationPreferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserNotificationPreferences", reflect.TypeOf((*MockStore)(nil).DeleteUserNotificationPreferences), arg0, arg1)
}

// DeleteUserPasswordResetTokens mocks base method.
func (m *MockStore) DeleteUserPasswordResetTokens(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPasswordResetTokens", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPasswordResetTokens indicates an expected call of DeleteUserPasswordResetTokens.
func (mr *MockStoreMockRecorder) DeleteUserPasswordResetTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPasswordResetTokens", reflect.TypeOf((*MockStore)(nil).DeleteUserPasswordResetTokens), arg0, arg1)
}

// DeleteWorkspace mocks base method.
func (m *MockStore) DeleteWorkspace(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspace indicates an expected call of DeleteWorkspace.
func (mr *MockStoreMockRecorder) DeleteWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspace", reflect.TypeOf((*MockStore)(nil).DeleteWorkspace), arg0, arg1)
}

// DeleteWorkspaceInvitation mocks base method.
func (m *MockStore) DeleteWorkspaceInvitation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkspaceInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkspaceInvitation indicates an expected call of DeleteWorkspaceInvitation.
func (mr *MockStoreMockRecorder) DeleteWorkspaceInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkspaceInvitation", reflect.TypeOf((*MockStore)(nil).DeleteWorkspaceInvitation), arg0, arg1)
}

// DisableUser2FA mocks base method.
func (m *MockStore) DisableUser2FA(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUser2FA", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableUser2FA indicates an expected call of DisableUser2FA.
func (mr *MockStoreMockRecorder) DisableUser2FA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUser2FA", reflect.TypeOf((*MockStore)(nil).DisableUser2FA), arg0, arg1)
}

// EnableUser2FA mocks base method.
func (m *MockStore) EnableUser2FA(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUser2FA", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableUser2FA indicates an expected call of EnableUser2FA.
func (mr *MockStoreMockRecorder) EnableUser2FA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUser2FA", reflect.TypeOf((*MockStore)(nil).EnableUser2FA), arg0, arg1)
}

// ExpireWorkspaceInvitation mocks base method.
func (m *MockStore) ExpireWorkspaceInvitation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireWorkspaceInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireWorkspaceInvitation indicates an expected call of ExpireWorkspaceInvitation.
func (mr *MockStoreMockRecorder) ExpireWorkspaceInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireWorkspaceInvitation", reflect.TypeOf((*MockStore)(nil).ExpireWorkspaceInvitation), arg0, arg1)
}

// GetAccountLockout mocks base method.
func (m *MockStore) GetAccountLockout(arg0 context.Context, arg1 int64) (db.AccountLockout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountLockout", arg0, arg1)
	ret0, _ := ret[0].(db.AccountLockout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountLockout indicates an expected call of GetAccountLockout.
func (mr *MockStoreMockRecorder) GetAccountLockout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountLockout", reflect.TypeOf((*MockStore)(nil).GetAccountLockout), arg0, arg1)
}

// GetChannel mocks base method.
func (m *MockStore) GetChannel(arg0 context.Context, arg1 int64) (db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0, arg1)
	ret0, _ := ret[0].(db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockStoreMockRecorder) GetChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockStore)(nil).GetChannel), arg0, arg1)
}

// GetChannelByID mocks base method.
func (m *MockStore) GetChannelByID(arg0 context.Context, arg1 int64) (db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByID", arg0, arg1)
	ret0, _ := ret[0].(db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelByID indicates an expected call of GetChannelByID.
func (mr *MockStoreMockRecorder) GetChannelByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByID", reflect.TypeOf((*MockStore)(nil).GetChannelByID), arg0, arg1)
}

// GetChannelMembers mocks base method.
func (m *MockStore) GetChannelMembers(arg0 context.Context, arg1 db.GetChannelMembersParams) ([]db.GetChannelMembersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMembers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetChannelMembersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelMembers indicates an expected call of GetChannelMembers.
func (mr *MockStoreMockRecorder) GetChannelMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMembers", reflect.TypeOf((*MockStore)(nil).GetChannelMembers), arg0, arg1)
}

// GetChannelMessages mocks base method.
func (m *MockStore) GetChannelMessages(arg0 context.Context, arg1 db.GetChannelMessagesParams) ([]db.GetChannelMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetChannelMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelMessages indicates an expected call of GetChannelMessages.
func (mr *MockStoreMockRecorder) GetChannelMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelMessages", reflect.TypeOf((*MockStore)(nil).GetChannelMessages), arg0, arg1)
}

// GetChannelUnreadCount mocks base method.
func (m *MockStore) GetChannelUnreadCount(arg0 context.Context, arg1 db.GetChannelUnreadCountParams) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelUnreadCount", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelUnreadCount indicates an expected call of GetChannelUnreadCount.
func (mr *MockStoreMockRecorder) GetChannelUnreadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelUnreadCount", reflect.TypeOf((*MockStore)(nil).GetChannelUnreadCount), arg0, arg1)
}

// GetChannelWithCreator mocks base method.
func (m *MockStore) GetChannelWithCreator(arg0 context.Context, arg1 int64) (db.GetChannelWithCreatorRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelWithCreator", arg0, arg1)
	ret0, _ := ret[0].(db.GetChannelWithCreatorRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelWithCreator indicates an expected call of GetChannelWithCreator.
func (mr *MockStoreMockRecorder) GetChannelWithCreator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelWithCreator", reflect.TypeOf((*MockStore)(nil).GetChannelWithCreator), arg0, arg1)
}

// GetDirectMessageUnreadCount mocks base method.
func (m *MockStore) GetDirectMessageUnreadCount(arg0 context.Context, arg1 int64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectMessageUnreadCount", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectMessageUnreadCount indicates an expected call of GetDirectMessageUnreadCount.
func (mr *MockStoreMockRecorder) GetDirectMessageUnreadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectMessageUnreadCount", reflect.TypeOf((*MockStore)(nil).GetDirectMessageUnreadCount), arg0, arg1)
}

// GetDirectMessagesBetweenUsers mocks base method.
func (m *MockStore) GetDirectMessagesBetweenUsers(arg0 context.Context, arg1 db.GetDirectMessagesBetweenUsersParams) ([]db.GetDirectMessagesBetweenUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectMessagesBetweenUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDirectMessagesBetweenUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectMessagesBetweenUsers indicates an expected call of GetDirectMessagesBetweenUsers.
func (mr *MockStoreMockRecorder) GetDirectMessagesBetweenUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectMessagesBetweenUsers", reflect.TypeOf((*MockStore)(nil).GetDirectMessagesBetweenUsers), arg0, arg1)
}

// GetDuplicateFiles mocks base method.
func (m *MockStore) GetDuplicateFiles(arg0 context.Context, arg1 int64) ([]db.GetDuplicateFilesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuplicateFiles", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDuplicateFilesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDuplicateFiles indicates an expected call of GetDuplicateFiles.
func (mr *MockStoreMockRecorder) GetDuplicateFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuplicateFiles", reflect.TypeOf((*MockStore)(nil).GetDuplicateFiles), arg0, arg1)
}

// GetEmailVerificationToken mocks base method.
func (m *MockStore) GetEmailVerificationToken(arg0 context.Context, arg1 string) (db.EmailVerificationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailVerificationToken", arg0, arg1)
	ret0, _ := ret[0].(db.EmailVerificationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailVerificationToken indicates an expected call of GetEmailVerificationToken.
func (mr *MockStoreMockRecorder) GetEmailVerificationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailVerificationToken", reflect.TypeOf((*MockStore)(nil).GetEmailVerificationToken), arg0, arg1)
}

// GetFile mocks base method.
func (m *MockStore) GetFile(arg0 context.Context, arg1 int64) (db.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", arg0, arg1)
	ret0, _ := ret[0].(db.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockStoreMockRecorder) GetFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockStore)(nil).GetFile), arg0, arg1)
}

// GetFileByHash mocks base method.
func (m *MockStore) GetFileByHash(arg0 context.Context, arg1 db.GetFileByHashParams) (db.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByHash", arg0, arg1)
	ret0, _ := ret[0].(db.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByHash indicates an expected call of GetFileByHash.
func (mr *MockStoreMockRecorder) GetFileByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByHash", reflect.TypeOf((*MockStore)(nil).GetFileByHash), arg0, arg1)
}

// GetFileMessages mocks base method.
func (m *MockStore) GetFileMessages(arg0 context.Context, arg1 int64) ([]db.GetFileMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetFileMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMessages indicates an expected call of GetFileMessages.
func (mr *MockStoreMockRecorder) GetFileMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMessages", reflect.TypeOf((*MockStore)(nil).GetFileMessages), arg0, arg1)
}

// GetFileShares mocks base method.
func (m *MockStore) GetFileShares(arg0 context.Context, arg1 int64) ([]db.GetFileSharesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileShares", arg0, arg1)
	ret0, _ := ret[0].([]db.GetFileSharesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileShares indicates an expected call of GetFileShares.
func (mr *MockStoreMockRecorder) GetFileShares(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileShares", reflect.TypeOf((*MockStore)(nil).GetFileShares), arg0, arg1)
}

// GetFileStats mocks base method.
func (m *MockStore) GetFileStats(arg0 context.Context, arg1 int64) (db.GetFileStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileStats", arg0, arg1)
	ret0, _ := ret[0].(db.GetFileStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileStats indicates an expected call of GetFileStats.
func (mr *MockStoreMockRecorder) GetFileStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileStats", reflect.TypeOf((*MockStore)(nil).GetFileStats), arg0, arg1)
}

// GetFileWithPermissionCheck mocks base method.
func (m *MockStore) GetFileWithPermissionCheck(arg0 context.Context, arg1 db.GetFileWithPermissionCheckParams) (db.GetFileWithPermissionCheckRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileWithPermissionCheck", arg0, arg1)
	ret0, _ := ret[0].(db.GetFileWithPermissionCheckRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileWithPermissionCheck indicates an expected call of GetFileWithPermissionCheck.
func (mr *MockStoreMockRecorder) GetFileWithPermissionCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileWithPermissionCheck", reflect.TypeOf((*MockStore)(nil).GetFileWithPermissionCheck), arg0, arg1)
}

// GetGlobalNotificationPreference mocks base method.
func (m *MockStore) GetGlobalNotificationPreference(arg0 context.Context, arg1 db.GetGlobalNotificationPreferenceParams) (db.NotificationPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalNotificationPreference", arg0, arg1)
	ret0, _ := ret[0].(db.NotificationPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalNotificationPreference indicates an expected call of GetGlobalNotificationPreference.
func (mr *MockStoreMockRecorder) GetGlobalNotificationPreference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalNotificationPreference", reflect.TypeOf((*MockStore)(nil).GetGlobalNotificationPreference), arg0, arg1)
}

// GetMessageByID mocks base method.
func (m *MockStore) GetMessageByID(arg0 context.Context, arg1 int64) (db.GetMessageByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", arg0, arg1)
	ret0, _ := ret[0].(db.GetMessageByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockStoreMockRecorder) GetMessageByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockStore)(nil).GetMessageByID), arg0, arg1)
}

// GetMessageDraft mocks base method.
func (m *MockStore) GetMessageDraft(arg0 context.Context, arg1 db.GetMessageDraftParams) (db.MessageDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageDraft", arg0, arg1)
	ret0, _ := ret[0].(db.MessageDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageDraft indicates an expected call of GetMessageDraft.
func (mr *MockStoreMockRecorder) GetMessageDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageDraft", reflect.TypeOf((*MockStore)(nil).GetMessageDraft), arg0, arg1)
}

// GetMessageFiles mocks base method.
func (m *MockStore) GetMessageFiles(arg0 context.Context, arg1 int64) ([]db.GetMessageFilesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageFiles", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMessageFilesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageFiles indicates an expected call of GetMessageFiles.
func (mr *MockStoreMockRecorder) GetMessageFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageFiles", reflect.TypeOf((*MockStore)(nil).GetMessageFiles), arg0, arg1)
}

// GetMessageMentions mocks base method.
func (m *MockStore) GetMessageMentions(arg0 context.Context, arg1 int64) ([]db.GetMessageMentionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageMentions", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMessageMentionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageMentions indicates an expected call of GetMessageMentions.
func (mr *MockStoreMockRecorder) GetMessageMentions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageMentions", reflect.TypeOf((*MockStore)(nil).GetMessageMentions), arg0, arg1)
}

// GetMessageReactionCounts mocks base method.
func (m *MockStore) GetMessageReactionCounts(arg0 context.Context, arg1 int64) ([]db.GetMessageReactionCountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageReactionCounts", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMessageReactionCountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageReactionCounts indicates an expected call of GetMessageReactionCounts.
func (mr *MockStoreMockRecorder) GetMessageReactionCounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageReactionCounts", reflect.TypeOf((*MockStore)(nil).GetMessageReactionCounts), arg0, arg1)
}

// GetMessageReactions mocks base method.
func (m *MockStore) GetMessageReactions(arg0 context.Context, arg1 int64) ([]db.GetMessageReactionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageReactions", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMessageReactionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageReactions indicates an expected call of GetMessageReactions.
func (mr *MockStoreMockRecorder) GetMessageReactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageReactions", reflect.TypeOf((*MockStore)(nil).GetMessageReactions), arg0, arg1)
}

// GetNotificationPreference mocks base method.
func (m *MockStore) GetNotificationPreference(arg0 context.Context, arg1 db.GetNotificationPreferenceParams) (db.NotificationPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationPreference", arg0, arg1)
	ret0, _ := ret[0].(db.NotificationPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationPreference indicates an expected call of GetNotificationPreference.
func (mr *MockStoreMockRecorder) GetNotificationPreference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationPreference", reflect.TypeOf((*MockStore)(nil).GetNotificationPreference), arg0, arg1)
}

// GetOnlineUsersInWorkspace mocks base method.
func (m *MockStore) GetOnlineUsersInWorkspace(arg0 context.Context, arg1 int64) ([]db.GetOnlineUsersInWorkspaceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineUsersInWorkspace", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOnlineUsersInWorkspaceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineUsersInWorkspace indicates an expected call of GetOnlineUsersInWorkspace.
func (mr *MockStoreMockRecorder) GetOnlineUsersInWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineUsersInWorkspace", reflect.TypeOf((*MockStore)(nil).GetOnlineUsersInWorkspace), arg0, arg1)
}

// GetOrganization mocks base method.
func (m *MockStore) GetOrganization(arg0 context.Context, arg1 int64) (db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0, arg1)
	ret0, _ := ret[0].(db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockStoreMockRecorder) GetOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockStore)(nil).GetOrganization), arg0, arg1)
}

// GetPasswordResetToken mocks base method.
func (m *MockStore) GetPasswordResetToken(arg0 context.Context, arg1 string) (db.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordResetToken", arg0, arg1)
	ret0, _ := ret[0].(db.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordResetToken indicates an expected call of GetPasswordResetToken.
func (mr *MockStoreMockRecorder) GetPasswordResetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordResetToken", reflect.TypeOf((*MockStore)(nil).GetPasswordResetToken), arg0, arg1)
}

// GetPendingInvitationsForUser mocks base method.
func (m *MockStore) GetPendingInvitationsForUser(arg0 context.Context, arg1 string) ([]db.GetPendingInvitationsForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInvitationsForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPendingInvitationsForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInvitationsForUser indicates an expected call of GetPendingInvitationsForUser.
func (mr *MockStoreMockRecorder) GetPendingInvitationsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInvitationsForUser", reflect.TypeOf((*MockStore)(nil).GetPendingInvitationsForUser), arg0, arg1)
}

// GetPendingScheduledMessages mocks base method.
func (m *MockStore) GetPendingScheduledMessages(arg0 context.Context, arg1 int32) ([]db.ScheduledMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingScheduledMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.ScheduledMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingScheduledMessages indicates an expected call of GetPendingScheduledMessages.
func (mr *MockStoreMockRecorder) GetPendingScheduledMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingScheduledMessages", reflect.TypeOf((*MockStore)(nil).GetPendingScheduledMessages), arg0, arg1)
}

// GetPinnedMessages mocks base method.
func (m *MockStore) GetPinnedMessages(arg0 context.Context, arg1 int64) ([]db.GetPinnedMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPinnedMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPinnedMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinnedMessages indicates an expected call of GetPinnedMessages.
func (mr *MockStoreMockRecorder) GetPinnedMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPinnedMessages", reflect.TypeOf((*MockStore)(nil).GetPinnedMessages), arg0, arg1)
}

// GetRecentSecurityEvents mocks base method.
func (m *MockStore) GetRecentSecurityEvents(arg0 context.Context, arg1 db.GetRecentSecurityEventsParams) ([]db.SecurityEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentSecurityEvents", arg0, arg1)
	ret0, _ := ret[0].([]db.SecurityEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentSecurityEvents indicates an expected call of GetRecentSecurityEvents.
func (mr *MockStoreMockRecorder) GetRecentSecurityEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentSecurityEvents", reflect.TypeOf((*MockStore)(nil).GetRecentSecurityEvents), arg0, arg1)
}

// GetRecentWorkspaceMessages mocks base method.
func (m *MockStore) GetRecentWorkspaceMessages(arg0 context.Context, arg1 db.GetRecentWorkspaceMessagesParams) ([]db.GetRecentWorkspaceMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentWorkspaceMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRecentWorkspaceMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentWorkspaceMessages indicates an expected call of GetRecentWorkspaceMessages.
func (mr *MockStoreMockRecorder) GetRecentWorkspaceMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentWorkspaceMessages", reflect.TypeOf((*MockStore)(nil).GetRecentWorkspaceMessages), arg0, arg1)
}

// GetScheduledMessage mocks base method.
func (m *MockStore) GetScheduledMessage(arg0 context.Context, arg1 db.GetScheduledMessageParams) (db.ScheduledMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledMessage", arg0, arg1)
	ret0, _ := ret[0].(db.ScheduledMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledMessage indicates an expected call of GetScheduledMessage.
func (mr *MockStoreMockRecorder) GetScheduledMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledMessage", reflect.TypeOf((*MockStore)(nil).GetScheduledMessage), arg0, arg1)
}

// GetScheduledMessagesStats mocks base method.
func (m *MockStore) GetScheduledMessagesStats(arg0 context.Context, arg1 db.GetScheduledMessagesStatsParams) (db.GetScheduledMessagesStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledMessagesStats", arg0, arg1)
	ret0, _ := ret[0].(db.GetScheduledMessagesStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledMessagesStats indicates an expected call of GetScheduledMessagesStats.
func (mr *MockStoreMockRecorder) GetScheduledMessagesStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledMessagesStats", reflect.TypeOf((*MockStore)(nil).GetScheduledMessagesStats), arg0, arg1)
}

// GetSecurityEventsByType mocks base method.
func (m *MockStore) GetSecurityEventsByType(arg0 context.Context, arg1 db.GetSecurityEventsByTypeParams) ([]db.SecurityEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityEventsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.SecurityEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityEventsByType indicates an expected call of GetSecurityEventsByType.
func (mr *MockStoreMockRecorder) GetSecurityEventsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityEventsByType", reflect.TypeOf((*MockStore)(nil).GetSecurityEventsByType), arg0, arg1)
}

// GetThreadInfo mocks base method.
func (m *MockStore) GetThreadInfo(arg0 context.Context, arg1 int64) (db.GetThreadInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadInfo", arg0, arg1)
	ret0, _ := ret[0].(db.GetThreadInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadInfo indicates an expected call of GetThreadInfo.
func (mr *MockStoreMockRecorder) GetThreadInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadInfo", reflect.TypeOf((*MockStore)(nil).GetThreadInfo), arg0, arg1)
}

// GetThreadMessages mocks base method.
func (m *MockStore) GetThreadMessages(arg0 context.Context, arg1 int64) ([]db.GetThreadMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetThreadMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadMessages indicates an expected call of GetThreadMessages.
func (mr *MockStoreMockRecorder) GetThreadMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadMessages", reflect.TypeOf((*MockStore)(nil).GetThreadMessages), arg0, arg1)
}

// GetThreadReplies mocks base method.
func (m *MockStore) GetThreadReplies(arg0 context.Context, arg1 db.GetThreadRepliesParams) ([]db.GetThreadRepliesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreadReplies", arg0, arg1)
	ret0, _ := ret[0].([]db.GetThreadRepliesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThreadReplies indicates an expected call of GetThreadReplies.
func (mr *MockStoreMockRecorder) GetThreadReplies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreadReplies", reflect.TypeOf((*MockStore)(nil).GetThreadReplies), arg0, arg1)
}

// GetUnreadMentions mocks base method.
func (m *MockStore) GetUnreadMentions(arg0 context.Context, arg1 db.GetUnreadMentionsParams) ([]db.GetUnreadMentionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMentions", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUnreadMentionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMentions indicates an expected call of GetUnreadMentions.
func (mr *MockStoreMockRecorder) GetUnreadMentions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMentions", reflect.TypeOf((*MockStore)(nil).GetUnreadMentions), arg0, arg1)
}

// GetUnreadMessages mocks base method.
func (m *MockStore) GetUnreadMessages(arg0 context.Context, arg1 db.GetUnreadMessagesParams) ([]db.UnreadMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.UnreadMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMessages indicates an expected call of GetUnreadMessages.
func (mr *MockStoreMockRecorder) GetUnreadMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMessages", reflect.TypeOf((*MockStore)(nil).GetUnreadMessages), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUser2FA mocks base method.
func (m *MockStore) GetUser2FA(arg0 context.Context, arg1 int64) (db.User2fa, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser2FA", arg0, arg1)
	ret0, _ := ret[0].(db.User2fa)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser2FA indicates an expected call of GetUser2FA.
func (mr *MockStoreMockRecorder) GetUser2FA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser2FA", reflect.TypeOf((*MockStore)(nil).GetUser2FA), arg0, arg1)
}

// GetUserActiveSessions mocks base method.
func (m *MockStore) GetUserActiveSessions(arg0 context.Context, arg1 int64) ([]db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserActiveSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserActiveSessions indicates an expected call of GetUserActiveSessions.
func (mr *MockStoreMockRecorder) GetUserActiveSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActiveSessions", reflect.TypeOf((*MockStore)(nil).GetUserActiveSessions), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserChannels mocks base method.
func (m *MockStore) GetUserChannels(arg0 context.Context, arg1 db.GetUserChannelsParams) ([]db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChannels", arg0, arg1)
	ret0, _ := ret[0].([]db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChannels indicates an expected call of GetUserChannels.
func (mr *MockStoreMockRecorder) GetUserChannels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChannels", reflect.TypeOf((*MockStore)(nil).GetUserChannels), arg0, arg1)
}

// GetUserDrafts mocks base method.
func (m *MockStore) GetUserDrafts(arg0 context.Context, arg1 db.GetUserDraftsParams) ([]db.GetUserDraftsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDrafts", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserDraftsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDrafts indicates an expected call of GetUserDrafts.
func (mr *MockStoreMockRecorder) GetUserDrafts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDrafts", reflect.TypeOf((*MockStore)(nil).GetUserDrafts), arg0, arg1)
}

// GetUserEmailVerificationTokens mocks base method.
func (m *MockStore) GetUserEmailVerificationTokens(arg0 context.Context, arg1 db.GetUserEmailVerificationTokensParams) ([]db.EmailVerificationToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmailVerificationTokens", arg0, arg1)
	ret0, _ := ret[0].([]db.EmailVerificationToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailVerificationTokens indicates an expected call of GetUserEmailVerificationTokens.
func (mr *MockStoreMockRecorder) GetUserEmailVerificationTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailVerificationTokens", reflect.TypeOf((*MockStore)(nil).GetUserEmailVerificationTokens), arg0, arg1)
}

// GetUserMentions mocks base method.
func (m *MockStore) GetUserMentions(arg0 context.Context, arg1 db.GetUserMentionsParams) ([]db.GetUserMentionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMentions", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserMentionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMentions indicates an expected call of GetUserMentions.
func (mr *MockStoreMockRecorder) GetUserMentions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMentions", reflect.TypeOf((*MockStore)(nil).GetUserMentions), arg0, arg1)
}

// GetUserNotificationPreferences mocks base method.
func (m *MockStore) GetUserNotificationPreferences(arg0 context.Context, arg1 db.GetUserNotificationPreferencesParams) ([]db.NotificationPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotificationPreferences", arg0, arg1)
	ret0, _ := ret[0].([]db.NotificationPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotificationPreferences indicates an expected call of GetUserNotificationPreferences.
func (mr *MockStoreMockRecorder) GetUserNotificationPreferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotificationPreferences", reflect.TypeOf((*MockStore)(nil).GetUserNotificationPreferences), arg0, arg1)
}

// GetUserReactionsForMessage mocks base method.
func (m *MockStore) GetUserReactionsForMessage(arg0 context.Context, arg1 db.GetUserReactionsForMessageParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReactionsForMessage", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReactionsForMessage indicates an expected call of GetUserReactionsForMessage.
func (mr *MockStoreMockRecorder) GetUserReactionsForMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReactionsForMessage", reflect.TypeOf((*MockStore)(nil).GetUserReactionsForMessage), arg0, arg1)
}

// GetUserScheduledMessages mocks base method.
func (m *MockStore) GetUserScheduledMessages(arg0 context.Context, arg1 db.GetUserScheduledMessagesParams) ([]db.GetUserScheduledMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserScheduledMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserScheduledMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserScheduledMessages indicates an expected call of GetUserScheduledMessages.
func (mr *MockStoreMockRecorder) GetUserScheduledMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserScheduledMessages", reflect.TypeOf((*MockStore)(nil).GetUserScheduledMessages), arg0, arg1)
}

// GetUserSecurityEvents mocks base method.
func (m *MockStore) GetUserSecurityEvents(arg0 context.Context, arg1 db.GetUserSecurityEventsParams) ([]db.SecurityEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSecurityEvents", arg0, arg1)
	ret0, _ := ret[0].([]db.SecurityEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSecurityEvents indicates an expected call of GetUserSecurityEvents.
func (mr *MockStoreMockRecorder) GetUserSecurityEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSecurityEvents", reflect.TypeOf((*MockStore)(nil).GetUserSecurityEvents), arg0, arg1)
}

// GetUserSession mocks base method.
func (m *MockStore) GetUserSession(arg0 context.Context, arg1 string) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSession", arg0, arg1)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSession indicates an expected call of GetUserSession.
func (mr *MockStoreMockRecorder) GetUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSession", reflect.TypeOf((*MockStore)(nil).GetUserSession), arg0, arg1)
}

// GetUserSessionByRefreshToken mocks base method.
func (m *MockStore) GetUserSessionByRefreshToken(arg0 context.Context, arg1 string) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessionByRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessionByRefreshToken indicates an expected call of GetUserSessionByRefreshToken.
func (mr *MockStoreMockRecorder) GetUserSessionByRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessionByRefreshToken", reflect.TypeOf((*MockStore)(nil).GetUserSessionByRefreshToken), arg0, arg1)
}

// GetUserStatus mocks base method.
func (m *MockStore) GetUserStatus(arg0 context.Context, arg1 db.GetUserStatusParams) (db.UserStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStatus", arg0, arg1)
	ret0, _ := ret[0].(db.UserStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStatus indicates an expected call of GetUserStatus.
func (mr *MockStoreMockRecorder) GetUserStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStatus", reflect.TypeOf((*MockStore)(nil).GetUserStatus), arg0, arg1)
}

// GetUsersByWorkspace mocks base method.
func (m *MockStore) GetUsersByWorkspace(arg0 context.Context, arg1 db.GetUsersByWorkspaceParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByWorkspace", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByWorkspace indicates an expected call of GetUsersByWorkspace.
func (mr *MockStoreMockRecorder) GetUsersByWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByWorkspace", reflect.TypeOf((*MockStore)(nil).GetUsersByWorkspace), arg0, arg1)
}

// GetWorkspace mocks base method.
func (m *MockStore) GetWorkspace(arg0 context.Context, arg1 int64) (db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", arg0, arg1)
	ret0, _ := ret[0].(db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockStoreMockRecorder) GetWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockStore)(nil).GetWorkspace), arg0, arg1)
}

// GetWorkspaceByID mocks base method.
func (m *MockStore) GetWorkspaceByID(arg0 context.Context, arg1 int64) (db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceByID", arg0, arg1)
	ret0, _ := ret[0].(db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceByID indicates an expected call of GetWorkspaceByID.
func (mr *MockStoreMockRecorder) GetWorkspaceByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceByID", reflect.TypeOf((*MockStore)(nil).GetWorkspaceByID), arg0, arg1)
}

// GetWorkspaceInvitation mocks base method.
func (m *MockStore) GetWorkspaceInvitation(arg0 context.Context, arg1 int64) (db.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceInvitation", arg0, arg1)
	ret0, _ := ret[0].(db.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceInvitation indicates an expected call of GetWorkspaceInvitation.
func (mr *MockStoreMockRecorder) GetWorkspaceInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceInvitation", reflect.TypeOf((*MockStore)(nil).GetWorkspaceInvitation), arg0, arg1)
}

// GetWorkspaceInvitationByCode mocks base method.
func (m *MockStore) GetWorkspaceInvitationByCode(arg0 context.Context, arg1 string) (db.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceInvitationByCode", arg0, arg1)
	ret0, _ := ret[0].(db.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceInvitationByCode indicates an expected call of GetWorkspaceInvitationByCode.
func (mr *MockStoreMockRecorder) GetWorkspaceInvitationByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceInvitationByCode", reflect.TypeOf((*MockStore)(nil).GetWorkspaceInvitationByCode), arg0, arg1)
}

// GetWorkspaceMemberCount mocks base method.
func (m *MockStore) GetWorkspaceMemberCount(arg0 context.Context, arg1 sql.NullInt64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceMemberCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceMemberCount indicates an expected call of GetWorkspaceMemberCount.
func (mr *MockStoreMockRecorder) GetWorkspaceMemberCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceMemberCount", reflect.TypeOf((*MockStore)(nil).GetWorkspaceMemberCount), arg0, arg1)
}

// GetWorkspaceUnreadCount mocks base method.
func (m *MockStore) GetWorkspaceUnreadCount(arg0 context.Context, arg1 db.GetWorkspaceUnreadCountParams) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceUnreadCount", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceUnreadCount indicates an expected call of GetWorkspaceUnreadCount.
func (mr *MockStoreMockRecorder) GetWorkspaceUnreadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceUnreadCount", reflect.TypeOf((*MockStore)(nil).GetWorkspaceUnreadCount), arg0, arg1)
}

// GetWorkspaceUserStatuses mocks base method.
func (m *MockStore) GetWorkspaceUserStatuses(arg0 context.Context, arg1 db.GetWorkspaceUserStatusesParams) ([]db.GetWorkspaceUserStatusesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceUserStatuses", arg0, arg1)
	ret0, _ := ret[0].([]db.GetWorkspaceUserStatusesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceUserStatuses indicates an expected call of GetWorkspaceUserStatuses.
func (mr *MockStoreMockRecorder) GetWorkspaceUserStatuses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceUserStatuses", reflect.TypeOf((*MockStore)(nil).GetWorkspaceUserStatuses), arg0, arg1)
}

// GetWorkspaceWithUserCount mocks base method.
func (m *MockStore) GetWorkspaceWithUserCount(arg0 context.Context, arg1 int64) (db.GetWorkspaceWithUserCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceWithUserCount", arg0, arg1)
	ret0, _ := ret[0].(db.GetWorkspaceWithUserCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspaceWithUserCount indicates an expected call of GetWorkspaceWithUserCount.
func (mr *MockStoreMockRecorder) GetWorkspaceWithUserCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceWithUserCount", reflect.TypeOf((*MockStore)(nil).GetWorkspaceWithUserCount), arg0, arg1)
}

// HasUserReacted mocks base method.
func (m *MockStore) HasUserReacted(arg0 context.Context, arg1 db.HasUserReactedParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserReacted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUserReacted indicates an expected call of HasUserReacted.
func (mr *MockStoreMockRecorder) HasUserReacted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserReacted", reflect.TypeOf((*MockStore)(nil).HasUserReacted), arg0, arg1)
}

// IncrementFailedAttempts mocks base method.
func (m *MockStore) IncrementFailedAttempts(arg0 context.Context, arg1 int64) (db.AccountLockout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFailedAttempts", arg0, arg1)
	ret0, _ := ret[0].(db.AccountLockout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementFailedAttempts indicates an expected call of IncrementFailedAttempts.
func (mr *MockStoreMockRecorder) IncrementFailedAttempts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFailedAttempts", reflect.TypeOf((*MockStore)(nil).IncrementFailedAttempts), arg0, arg1)
}

// IsAccountLocked mocks base method.
func (m *MockStore) IsAccountLocked(arg0 context.Context, arg1 int64) (sql.NullBool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountLocked", arg0, arg1)
	ret0, _ := ret[0].(sql.NullBool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAccountLocked indicates an expected call of IsAccountLocked.
func (mr *MockStoreMockRecorder) IsAccountLocked(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountLocked", reflect.TypeOf((*MockStore)(nil).IsAccountLocked), arg0, arg1)
}

// IsChannelMember mocks base method.
func (m *MockStore) IsChannelMember(arg0 context.Context, arg1 db.IsChannelMemberParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsChannelMember", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsChannelMember indicates an expected call of IsChannelMember.
func (mr *MockStoreMockRecorder) IsChannelMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsChannelMember", reflect.TypeOf((*MockStore)(nil).IsChannelMember), arg0, arg1)
}

// IsInDoNotDisturbMode mocks base method.
func (m *MockStore) IsInDoNotDisturbMode(arg0 context.Context, arg1 db.IsInDoNotDisturbModeParams) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInDoNotDisturbMode", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInDoNotDisturbMode indicates an expected call of IsInDoNotDisturbMode.
func (mr *MockStoreMockRecorder) IsInDoNotDisturbMode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInDoNotDisturbMode", reflect.TypeOf((*MockStore)(nil).IsInDoNotDisturbMode), arg0, arg1)
}

// IsMessagePinned mocks base method.
func (m *MockStore) IsMessagePinned(arg0 context.Context, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMessagePinned", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMessagePinned indicates an expected call of IsMessagePinned.
func (mr *MockStoreMockRecorder) IsMessagePinned(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMessagePinned", reflect.TypeOf((*MockStore)(nil).IsMessagePinned), arg0, arg1)
}

// ListChannelsByWorkspace mocks base method.
func (m *MockStore) ListChannelsByWorkspace(arg0 context.Context, arg1 db.ListChannelsByWorkspaceParams) ([]db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChannelsByWorkspace", arg0, arg1)
	ret0, _ := ret[0].([]db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChannelsByWorkspace indicates an expected call of ListChannelsByWorkspace.
func (mr *MockStoreMockRecorder) ListChannelsByWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChannelsByWorkspace", reflect.TypeOf((*MockStore)(nil).ListChannelsByWorkspace), arg0, arg1)
}

// ListOrganizations mocks base method.
func (m *MockStore) ListOrganizations(arg0 context.Context, arg1 db.ListOrganizationsParams) ([]db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", arg0, arg1)
	ret0, _ := ret[0].([]db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockStoreMockRecorder) ListOrganizations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockStore)(nil).ListOrganizations), arg0, arg1)
}

// ListPublicChannelsByWorkspace mocks base method.
func (m *MockStore) ListPublicChannelsByWorkspace(arg0 context.Context, arg1 db.ListPublicChannelsByWorkspaceParams) ([]db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicChannelsByWorkspace", arg0, arg1)
	ret0, _ := ret[0].([]db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicChannelsByWorkspace indicates an expected call of ListPublicChannelsByWorkspace.
func (mr *MockStoreMockRecorder) ListPublicChannelsByWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicChannelsByWorkspace", reflect.TypeOf((*MockStore)(nil).ListPublicChannelsByWorkspace), arg0, arg1)
}

// ListUserFiles mocks base method.
func (m *MockStore) ListUserFiles(arg0 context.Context, arg1 db.ListUserFilesParams) ([]db.ListUserFilesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserFiles", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUserFilesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserFiles indicates an expected call of ListUserFiles.
func (mr *MockStoreMockRecorder) ListUserFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserFiles", reflect.TypeOf((*MockStore)(nil).ListUserFiles), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// ListWorkspaceFiles mocks base method.
func (m *MockStore) ListWorkspaceFiles(arg0 context.Context, arg1 db.ListWorkspaceFilesParams) ([]db.ListWorkspaceFilesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceFiles", arg0, arg1)
	ret0, _ := ret[0].([]db.ListWorkspaceFilesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceFiles indicates an expected call of ListWorkspaceFiles.
func (mr *MockStoreMockRecorder) ListWorkspaceFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceFiles", reflect.TypeOf((*MockStore)(nil).ListWorkspaceFiles), arg0, arg1)
}

// ListWorkspaceInvitations mocks base method.
func (m *MockStore) ListWorkspaceInvitations(arg0 context.Context, arg1 db.ListWorkspaceInvitationsParams) ([]db.WorkspaceInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceInvitations", arg0, arg1)
	ret0, _ := ret[0].([]db.WorkspaceInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceInvitations indicates an expected call of ListWorkspaceInvitations.
func (mr *MockStoreMockRecorder) ListWorkspaceInvitations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceInvitations", reflect.TypeOf((*MockStore)(nil).ListWorkspaceInvitations), arg0, arg1)
}

// ListWorkspaceMembers mocks base method.
func (m *MockStore) ListWorkspaceMembers(arg0 context.Context, arg1 db.ListWorkspaceMembersParams) ([]db.ListWorkspaceMembersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspaceMembers", arg0, arg1)
	ret0, _ := ret[0].([]db.ListWorkspaceMembersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspaceMembers indicates an expected call of ListWorkspaceMembers.
func (mr *MockStoreMockRecorder) ListWorkspaceMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspaceMembers", reflect.TypeOf((*MockStore)(nil).ListWorkspaceMembers), arg0, arg1)
}

// ListWorkspacesByOrganization mocks base method.
func (m *MockStore) ListWorkspacesByOrganization(arg0 context.Context, arg1 db.ListWorkspacesByOrganizationParams) ([]db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkspacesByOrganization", arg0, arg1)
	ret0, _ := ret[0].([]db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkspacesByOrganization indicates an expected call of ListWorkspacesByOrganization.
func (mr *MockStoreMockRecorder) ListWorkspacesByOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkspacesByOrganization", reflect.TypeOf((*MockStore)(nil).ListWorkspacesByOrganization), arg0, arg1)
}

// LockAccount mocks base method.
func (m *MockStore) LockAccount(arg0 context.Context, arg1 db.LockAccountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockAccount indicates an expected call of LockAccount.
func (mr *MockStoreMockRecorder) LockAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockAccount", reflect.TypeOf((*MockStore)(nil).LockAccount), arg0, arg1)
}

// MarkChannelAsRead mocks base method.
func (m *MockStore) MarkChannelAsRead(arg0 context.Context, arg1 db.MarkChannelAsReadParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkChannelAsRead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkChannelAsRead indicates an expected call of MarkChannelAsRead.
func (mr *MockStoreMockRecorder) MarkChannelAsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkChannelAsRead", reflect.TypeOf((*MockStore)(nil).MarkChannelAsRead), arg0, arg1)
}

// MarkDirectMessagesAsRead mocks base method.
func (m *MockStore) MarkDirectMessagesAsRead(arg0 context.Context, arg1 db.MarkDirectMessagesAsReadParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDirectMessagesAsRead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDirectMessagesAsRead indicates an expected call of MarkDirectMessagesAsRead.
func (mr *MockStoreMockRecorder) MarkDirectMessagesAsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDirectMessagesAsRead", reflect.TypeOf((*MockStore)(nil).MarkDirectMessagesAsRead), arg0, arg1)
}

// MarkScheduledMessageAsSent mocks base method.
func (m *MockStore) MarkScheduledMessageAsSent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkScheduledMessageAsSent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkScheduledMessageAsSent indicates an expected call of MarkScheduledMessageAsSent.
func (mr *MockStoreMockRecorder) MarkScheduledMessageAsSent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkScheduledMessageAsSent", reflect.TypeOf((*MockStore)(nil).MarkScheduledMessageAsSent), arg0, arg1)
}

// PinMessage mocks base method.
func (m *MockStore) PinMessage(arg0 context.Context, arg1 db.PinMessageParams) (db.PinnedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinMessage", arg0, arg1)
	ret0, _ := ret[0].(db.PinnedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PinMessage indicates an expected call of PinMessage.
func (mr *MockStoreMockRecorder) PinMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinMessage", reflect.TypeOf((*MockStore)(nil).PinMessage), arg0, arg1)
}

// RemoveChannelMember mocks base method.
func (m *MockStore) RemoveChannelMember(arg0 context.Context, arg1 db.RemoveChannelMemberParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveChannelMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveChannelMember indicates an expected call of RemoveChannelMember.
func (mr *MockStoreMockRecorder) RemoveChannelMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChannelMember", reflect.TypeOf((*MockStore)(nil).RemoveChannelMember), arg0, arg1)
}

// RemoveMessageReaction mocks base method.
func (m *MockStore) RemoveMessageReaction(arg0 context.Context, arg1 db.RemoveMessageReactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMessageReaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMessageReaction indicates an expected call of RemoveMessageReaction.
func (mr *MockStoreMockRecorder) RemoveMessageReaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMessageReaction", reflect.TypeOf((*MockStore)(nil).RemoveMessageReaction), arg0, arg1)
}

// RemoveUserFromWorkspace mocks base method.
func (m *MockStore) RemoveUserFromWorkspace(arg0 context.Context, arg1 db.RemoveUserFromWorkspaceParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromWorkspace", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserFromWorkspace indicates an expected call of RemoveUserFromWorkspace.
func (mr *MockStoreMockRecorder) RemoveUserFromWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromWorkspace", reflect.TypeOf((*MockStore)(nil).RemoveUserFromWorkspace), arg0, arg1)
}

// ResetFailedAttempts mocks base method.
func (m *MockStore) ResetFailedAttempts(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetFailedAttempts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetFailedAttempts indicates an expected call of ResetFailedAttempts.
func (mr *MockStoreMockRecorder) ResetFailedAttempts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFailedAttempts", reflect.TypeOf((*MockStore)(nil).ResetFailedAttempts), arg0, arg1)
}

// ResetUnreadCount mocks base method.
func (m *MockStore) ResetUnreadCount(arg0 context.Context, arg1 db.ResetUnreadCountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUnreadCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetUnreadCount indicates an expected call of ResetUnreadCount.
func (mr *MockStoreMockRecorder) ResetUnreadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUnreadCount", reflect.TypeOf((*MockStore)(nil).ResetUnreadCount), arg0, arg1)
}

// SaveMessageDraft mocks base method.
func (m *MockStore) SaveMessageDraft(arg0 context.Context, arg1 db.SaveMessageDraftParams) (db.MessageDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessageDraft", arg0, arg1)
	ret0, _ := ret[0].(db.MessageDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMessageDraft indicates an expected call of SaveMessageDraft.
func (mr *MockStoreMockRecorder) SaveMessageDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessageDraft", reflect.TypeOf((*MockStore)(nil).SaveMessageDraft), arg0, arg1)
}

// SearchMessages mocks base method.
func (m *MockStore) SearchMessages(arg0 context.Context, arg1 db.SearchMessagesParams) ([]db.SearchMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessages indicates an expected call of SearchMessages.
func (mr *MockStoreMockRecorder) SearchMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessages", reflect.TypeOf((*MockStore)(nil).SearchMessages), arg0, arg1)
}

// SearchMessagesInThread mocks base method.
func (m *MockStore) SearchMessagesInThread(arg0 context.Context, arg1 db.SearchMessagesInThreadParams) ([]db.SearchMessagesInThreadRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessagesInThread", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchMessagesInThreadRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessagesInThread indicates an expected call of SearchMessagesInThread.
func (mr *MockStoreMockRecorder) SearchMessagesInThread(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessagesInThread", reflect.TypeOf((*MockStore)(nil).SearchMessagesInThread), arg0, arg1)
}

// SetUsersOfflineAfterInactivity mocks base method.
func (m *MockStore) SetUsersOfflineAfterInactivity(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUsersOfflineAfterInactivity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUsersOfflineAfterInactivity indicates an expected call of SetUsersOfflineAfterInactivity.
func (mr *MockStoreMockRecorder) SetUsersOfflineAfterInactivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsersOfflineAfterInactivity", reflect.TypeOf((*MockStore)(nil).SetUsersOfflineAfterInactivity), arg0, arg1)
}

// SoftDeleteMessage mocks base method.
func (m *MockStore) SoftDeleteMessage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteMessage indicates an expected call of SoftDeleteMessage.
func (mr *MockStoreMockRecorder) SoftDeleteMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteMessage", reflect.TypeOf((*MockStore)(nil).SoftDeleteMessage), arg0, arg1)
}

// UnlockAccount mocks base method.
func (m *MockStore) UnlockAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockAccount indicates an expected call of UnlockAccount.
func (mr *MockStoreMockRecorder) UnlockAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockAccount", reflect.TypeOf((*MockStore)(nil).UnlockAccount), arg0, arg1)
}

// UnlockExpiredAccounts mocks base method.
func (m *MockStore) UnlockExpiredAccounts(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockExpiredAccounts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockExpiredAccounts indicates an expected call of UnlockExpiredAccounts.
func (mr *MockStoreMockRecorder) UnlockExpiredAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockExpiredAccounts", reflect.TypeOf((*MockStore)(nil).UnlockExpiredAccounts), arg0)
}

// UnpinMessage mocks base method.
func (m *MockStore) UnpinMessage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpinMessage indicates an expected call of UnpinMessage.
func (mr *MockStoreMockRecorder) UnpinMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinMessage", reflect.TypeOf((*MockStore)(nil).UnpinMessage), arg0, arg1)
}

// UpdateChannel mocks base method.
func (m *MockStore) UpdateChannel(arg0 context.Context, arg1 db.UpdateChannelParams) (db.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0, arg1)
	ret0, _ := ret[0].(db.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockStoreMockRecorder) UpdateChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockStore)(nil).UpdateChannel), arg0, arg1)
}

// UpdateFileThumbnail mocks base method.
func (m *MockStore) UpdateFileThumbnail(arg0 context.Context, arg1 db.UpdateFileThumbnailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileThumbnail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileThumbnail indicates an expected call of UpdateFileThumbnail.
func (mr *MockStoreMockRecorder) UpdateFileThumbnail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileThumbnail", reflect.TypeOf((*MockStore)(nil).UpdateFileThumbnail), arg0, arg1)
}

// UpdateFileUploadStatus mocks base method.
func (m *MockStore) UpdateFileUploadStatus(arg0 context.Context, arg1 db.UpdateFileUploadStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileUploadStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileUploadStatus indicates an expected call of UpdateFileUploadStatus.
func (mr *MockStoreMockRecorder) UpdateFileUploadStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileUploadStatus", reflect.TypeOf((*MockStore)(nil).UpdateFileUploadStatus), arg0, arg1)
}

// UpdateLastActivity mocks base method.
func (m *MockStore) UpdateLastActivity(arg0 context.Context, arg1 db.UpdateLastActivityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastActivity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastActivity indicates an expected call of UpdateLastActivity.
func (mr *MockStoreMockRecorder) UpdateLastActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastActivity", reflect.TypeOf((*MockStore)(nil).UpdateLastActivity), arg0, arg1)
}

// UpdateMessageContent mocks base method.
func (m *MockStore) UpdateMessageContent(arg0 context.Context, arg1 db.UpdateMessageContentParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageContent", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessageContent indicates an expected call of UpdateMessageContent.
func (mr *MockStoreMockRecorder) UpdateMessageContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageContent", reflect.TypeOf((*MockStore)(nil).UpdateMessageContent), arg0, arg1)
}

// UpdateNotificationPreference mocks base method.
func (m *MockStore) UpdateNotificationPreference(arg0 context.Context, arg1 db.UpdateNotificationPreferenceParams) (db.NotificationPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationPreference", arg0, arg1)
	ret0, _ := ret[0].(db.NotificationPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotificationPreference indicates an expected call of UpdateNotificationPreference.
func (mr *MockStoreMockRecorder) UpdateNotificationPreference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationPreference", reflect.TypeOf((*MockStore)(nil).UpdateNotificationPreference), arg0, arg1)
}

// UpdateOrganization mocks base method.
func (m *MockStore) UpdateOrganization(arg0 context.Context, arg1 db.UpdateOrganizationParams) (db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0, arg1)
	ret0, _ := ret[0].(db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockStoreMockRecorder) UpdateOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockStore)(nil).UpdateOrganization), arg0, arg1)
}

// UpdateScheduledMessage mocks base method.
func (m *MockStore) UpdateScheduledMessage(arg0 context.Context, arg1 db.UpdateScheduledMessageParams) (db.ScheduledMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduledMessage", arg0, arg1)
	ret0, _ := ret[0].(db.ScheduledMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScheduledMessage indicates an expected call of UpdateScheduledMessage.
func (mr *MockStoreMockRecorder) UpdateScheduledMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledMessage", reflect.TypeOf((*MockStore)(nil).UpdateScheduledMessage), arg0, arg1)
}

// UpdateSessionLastUsed mocks base method.
func (m *MockStore) UpdateSessionLastUsed(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionLastUsed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionLastUsed indicates an expected call of UpdateSessionLastUsed.
func (mr *MockStoreMockRecorder) UpdateSessionLastUsed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionLastUsed", reflect.TypeOf((*MockStore)(nil).UpdateSessionLastUsed), arg0, arg1)
}

// UpdateUser2FABackupCodes mocks base method.
func (m *MockStore) UpdateUser2FABackupCodes(arg0 context.Context, arg1 db.UpdateUser2FABackupCodesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser2FABackupCodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser2FABackupCodes indicates an expected call of UpdateUser2FABackupCodes.
func (mr *MockStoreMockRecorder) UpdateUser2FABackupCodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser2FABackupCodes", reflect.TypeOf((*MockStore)(nil).UpdateUser2FABackupCodes), arg0, arg1)
}

// UpdateUserEmail mocks base method.
func (m *MockStore) UpdateUserEmail(arg0 context.Context, arg1 db.UpdateUserEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserEmail indicates an expected call of UpdateUserEmail.
func (mr *MockStoreMockRecorder) UpdateUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserEmail", reflect.TypeOf((*MockStore)(nil).UpdateUserEmail), arg0, arg1)
}

// UpdateUserPassword mocks base method.
func (m *MockStore) UpdateUserPassword(arg0 context.Context, arg1 db.UpdateUserPasswordParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStoreMockRecorder) UpdateUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserPassword), arg0, arg1)
}

// UpdateUserProfile mocks base method.
func (m *MockStore) UpdateUserProfile(arg0 context.Context, arg1 db.UpdateUserProfileParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockStoreMockRecorder) UpdateUserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockStore)(nil).UpdateUserProfile), arg0, arg1)
}

// UpdateUserRole mocks base method.
func (m *MockStore) UpdateUserRole(arg0 context.Context, arg1 db.UpdateUserRoleParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockStoreMockRecorder) UpdateUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockStore)(nil).UpdateUserRole), arg0, arg1)
}

// UpdateUserWorkspace mocks base method.
func (m *MockStore) UpdateUserWorkspace(arg0 context.Context, arg1 db.UpdateUserWorkspaceParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWorkspace", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserWorkspace indicates an expected call of UpdateUserWorkspace.
func (mr *MockStoreMockRecorder) UpdateUserWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWorkspace", reflect.TypeOf((*MockStore)(nil).UpdateUserWorkspace), arg0, arg1)
}

// UpdateWorkspace mocks base method.
func (m *MockStore) UpdateWorkspace(arg0 context.Context, arg1 db.UpdateWorkspaceParams) (db.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspace", arg0, arg1)
	ret0, _ := ret[0].(db.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspace indicates an expected call of UpdateWorkspace.
func (mr *MockStoreMockRecorder) UpdateWorkspace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspace", reflect.TypeOf((*MockStore)(nil).UpdateWorkspace), arg0, arg1)
}

// UpdateWorkspaceMemberRole mocks base method.
func (m *MockStore) UpdateWorkspaceMemberRole(arg0 context.Context, arg1 db.UpdateWorkspaceMemberRoleParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkspaceMemberRole", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkspaceMemberRole indicates an expected call of UpdateWorkspaceMemberRole.
func (mr *MockStoreMockRecorder) UpdateWorkspaceMemberRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkspaceMemberRole", reflect.TypeOf((*MockStore)(nil).UpdateWorkspaceMemberRole), arg0, arg1)
}

// UpsertNotificationPreference mocks base method.
func (m *MockStore) UpsertNotificationPreference(arg0 context.Context, arg1 db.UpsertNotificationPreferenceParams) (db.NotificationPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNotificationPreference", arg0, arg1)
	ret0, _ := ret[0].(db.NotificationPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertNotificationPreference indicates an expected call of UpsertNotificationPreference.
func (mr *MockStoreMockRecorder) UpsertNotificationPreference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNotificationPreference", reflect.TypeOf((*MockStore)(nil).UpsertNotificationPreference), arg0, arg1)
}

// UpsertUserStatus mocks base method.
func (m *MockStore) UpsertUserStatus(arg0 context.Context, arg1 db.UpsertUserStatusParams) (db.UserStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserStatus", arg0, arg1)
	ret0, _ := ret[0].(db.UserStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUserStatus indicates an expected call of UpsertUserStatus.
func (mr *MockStoreMockRecorder) UpsertUserStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserStatus", reflect.TypeOf((*MockStore)(nil).UpsertUserStatus), arg0, arg1)
}

// UseEmailVerificationToken mocks base method.
func (m *MockStore) UseEmailVerificationToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseEmailVerificationToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseEmailVerificationToken indicates an expected call of UseEmailVerificationToken.
func (mr *MockStoreMockRecorder) UseEmailVerificationToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseEmailVerificationToken", reflect.TypeOf((*MockStore)(nil).UseEmailVerificationToken), arg0, arg1)
}

// UsePasswordResetToken mocks base method.
func (m *MockStore) UsePasswordResetToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsePasswordResetToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UsePasswordResetToken indicates an expected call of UsePasswordResetToken.
func (mr *MockStoreMockRecorder) UsePasswordResetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsePasswordResetToken", reflect.TypeOf((*MockStore)(nil).UsePasswordResetToken), arg0, arg1)
}

// VerifyUserEmail mocks base method.
func (m *MockStore) VerifyUserEmail(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserEmail indicates an expected call of VerifyUserEmail.
func (mr *MockStoreMockRecorder) VerifyUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmail", reflect.TypeOf((*MockStore)(nil).VerifyUserEmail), arg0, arg1)
}
